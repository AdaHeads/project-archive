diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/demos/openid_client/exe/aws.ini Ada-development-Makefile/aws/demos/openid_client/exe/aws.ini
--- aws.upstream/demos/openid_client/exe/aws.ini	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/demos/openid_client/exe/aws.ini	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,5 @@
+Max_Connection 10
+Reuse_Address true
+Security True
+Server_Port 443
+Session True
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/demos/openid_client/exe/cert.pem Ada-development-Makefile/aws/demos/openid_client/exe/cert.pem
--- aws.upstream/demos/openid_client/exe/cert.pem	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/demos/openid_client/exe/cert.pem	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,36 @@
+-----BEGIN RSA PRIVATE KEY-----
+MIICXgIBAAKBgQDJgNZW4TerU4H03aN36lGt6iTm0ZRfhLQLZbjRzrHLj370xMbP
+aFaEOLJwpfyWqsEqVinAbcCLvTfiuam/Hz75udg4SymCYlNn3Q4DLOVSnwZaCmKv
+eZHLAXqTemJnAn0bxnv7U6e5IH77XgFIXVlXyAAPSKWt4S5bfXRd/fvxJQIDAQAB
+AoGAYgRIvtQo5y7kzT6u0JrrhmSZ9KlHujrr9YtSnsQjWjh/8gJyDtvbEdAehItJ
+VeTTt4tYHeGFQrQVJjVX678AO04px7cdhk1WYeAWfL/o6suTiJ+YEGZwp/v5rcyt
+BgXPSrYi/vNqQuKGoNfmTmcqW8ufvOsyCyplZ1fS/i664xUCQQDwWPqUhDANCUax
+L+rjOJ7xdBluV/+AFLAxTVCqurv5nhclSnY7HbfGIxhXkfaZrERhcwh37V3kIjEn
+/crD5VcbAkEA1qBBP2amOC6ZivG00gyH1Ai7FGEYG7jAOcE0yYuWnWHYN+K1jklf
+3z/TZNCEOS+ysOhkSg8gNlj+dD+4OZscvwJBALhX5snmoVw+UyQv1n60vOQA4kiJ
+4gQA2irWXBq24tpP8Py/IfOxlXS5EkCISZYQVNpReptRSgRiXUWJGO4rhyUCQQDO
+6rtc84rG2W5gPTz10OzWqAAs2prShyCTzcglkvUHEEDTSDd/URAj/LXCGSGQvIKK
++dFOcRy+KLhQvOnQZ9GjAkEAyh9sKc0KiI/4cpeXkv1fiC8h6MylVo9P36f0/1A7
+D79fbifRw/wMJ48Ho+WSDj0F6xOKBnuzm7ER6PFqPBLfcA==
+-----END RSA PRIVATE KEY-----
+-----BEGIN CERTIFICATE-----
+MIIDdzCCAuCgAwIBAgIBADANBgkqhkiG9w0BAQQFADCBijERMA8GA1UEChMIQVdT
+IFRlYW0xHDAaBgNVBAMTE0FkYSBXZWIgU2VydmVyIERlbW8xVzBVBgkqhkiG9w0B
+CQEWSFBhc2NhbCBPYnJ5IDxwLm9icnlAd2FuYWRvby5mcj4sIERtaXRyaXkgQW5p
+c2lta292IDxhbmlzaW1rb3ZAeWFob28uY29tPjAeFw0wMDA5MDEyMDI0MThaFw0w
+ODExMTgyMDI0MThaMIGKMREwDwYDVQQKEwhBV1MgVGVhbTEcMBoGA1UEAxMTQWRh
+IFdlYiBTZXJ2ZXIgRGVtbzFXMFUGCSqGSIb3DQEJARZIUGFzY2FsIE9icnkgPHAu
+b2JyeUB3YW5hZG9vLmZyPiwgRG1pdHJpeSBBbmlzaW1rb3YgPGFuaXNpbWtvdkB5
+YWhvby5jb20+MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDJgNZW4TerU4H0
+3aN36lGt6iTm0ZRfhLQLZbjRzrHLj370xMbPaFaEOLJwpfyWqsEqVinAbcCLvTfi
+uam/Hz75udg4SymCYlNn3Q4DLOVSnwZaCmKveZHLAXqTemJnAn0bxnv7U6e5IH77
+XgFIXVlXyAAPSKWt4S5bfXRd/fvxJQIDAQABo4HqMIHnMB0GA1UdDgQWBBR5F/p1
+Tg6EPhR0F3NrVwF32DliNDCBtwYDVR0jBIGvMIGsgBR5F/p1Tg6EPhR0F3NrVwF3
+2DliNKGBkKSBjTCBijERMA8GA1UEChMIQVdTIFRlYW0xHDAaBgNVBAMTE0FkYSBX
+ZWIgU2VydmVyIERlbW8xVzBVBgkqhkiG9w0BCQEWSFBhc2NhbCBPYnJ5IDxwLm9i
+cnlAd2FuYWRvby5mcj4sIERtaXRyaXkgQW5pc2lta292IDxhbmlzaW1rb3ZAeWFo
+b28uY29tPoIBADAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBAUAA4GBAIYTInFi
+wTXHvvBBmZO2gC4X+aSw7TZpJah5Iy1L1sPUfvwPafqtJ/6Smf6ngagHSlBkMYPy
+sfNIlGwXYvoSOoMDZ0icjtwa+8TLQ14cGQrxJdz49de/M4Or6vBHJhf4a5rNcbhV
+t+WCGYx2dJJOsOdqULKAY69jvdvpui2vQEGR
+-----END CERTIFICATE-----
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/demos/openid_client/exe/error.html Ada-development-Makefile/aws/demos/openid_client/exe/error.html
--- aws.upstream/demos/openid_client/exe/error.html	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/demos/openid_client/exe/error.html	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,14 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
+
+<html lang="en">
+<head>
+  <title>An error occurred during OpenID log-in</title>
+
+  <link rel="STYLESHEET" type="text/css" href="/style.css">
+</head>
+
+<body>
+  <h1>Testing the <a href="https://github.com/AdaHeads/openid-client">OpenID for AWS library</a></h1>
+  <p><a href="/">The server</a> experienced an exception.</p>
+</body>
+</html>
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/demos/openid_client/exe/index.html Ada-development-Makefile/aws/demos/openid_client/exe/index.html
--- aws.upstream/demos/openid_client/exe/index.html	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/demos/openid_client/exe/index.html	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,31 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
+
+<html lang="en">
+<head>
+  <title>Testing the OpenID for AWS library</title>
+  <link rel="STYLESHEET" type="text/css" href="/style.css">
+</head>
+
+<body>
+  <h1>Testing the <a href="https://github.com/AdaHeads/openid-client">OpenID for AWS library</a></h1>
+
+  <h2>Log in using:</h2>
+
+  <ul>
+    <li>
+      <p><a href=
+      "/log_in?openid=https://www.google.com/accounts/o8/id">Google</a></p>
+    </li>
+
+    <li>
+      <p><a href="/log_in?openid=https://www.myopenid.com/">MyOpenID</a></p>
+    </li>
+
+    <li>
+      <form method="post" action="/log_in">
+        Any other OpenID provider: <input type="text" name="openid">
+      </form>
+    </li>
+  </ul>
+</body>
+</html>
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/demos/openid_client/exe/logged_in.html Ada-development-Makefile/aws/demos/openid_client/exe/logged_in.html
--- aws.upstream/demos/openid_client/exe/logged_in.html	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/demos/openid_client/exe/logged_in.html	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,13 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
+
+<html lang="en">
+<head>
+  <title>OpenID Login Succeeded!</title>
+  <link rel="STYLESHEET" type="text/css" href="/style.css">
+</head>
+<body>
+  <h1>Testing the <a href="https://github.com/AdaHeads/openid-client">OpenID for AWS library</a></h1>
+  <p>You are logged in.</p>
+  <p><a href="/log_out">Log out?</a></p>
+</body>
+</html>
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/demos/openid_client/exe/logged_out.html Ada-development-Makefile/aws/demos/openid_client/exe/logged_out.html
--- aws.upstream/demos/openid_client/exe/logged_out.html	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/demos/openid_client/exe/logged_out.html	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,13 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
+
+<html lang="en">
+<head>
+  <title>Logged Out!</title>
+  <link rel="STYLESHEET" type="text/css" href="/style.css">
+</head>
+<body>
+  <h1>Testing the <a href="https://github.com/AdaHeads/openid-client">OpenID for AWS library</a></h1>
+  <p>You've been logged out.</p>
+  <p><a href="/">Login again?</a></p>
+</body>
+</html>
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/demos/openid_client/exe/not_authenticated.html Ada-development-Makefile/aws/demos/openid_client/exe/not_authenticated.html
--- aws.upstream/demos/openid_client/exe/not_authenticated.html	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/demos/openid_client/exe/not_authenticated.html	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,15 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
+
+<html lang="en">
+<head>
+  <title>Your OpenID log-in did not succeed</title>
+
+  <link rel="STYLESHEET" type="text/css" href="/style.css">
+</head>
+
+<body>
+  <h1>Testing the <a href="https://github.com/AdaHeads/openid-client">OpenID for AWS library</a></h1>
+  <p>The server could not authenticate you.</p>
+  <p>Please <a href="/">Try again?</a>.</p>
+</body>
+</html>
Binære filer aws.upstream/demos/openid_client/exe/openid_demo.state.associations og Ada-development-Makefile/aws/demos/openid_client/exe/openid_demo.state.associations er forskellige
Binære filer aws.upstream/demos/openid_client/exe/openid_demo.state.authentications og Ada-development-Makefile/aws/demos/openid_client/exe/openid_demo.state.authentications er forskellige
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/demos/openid_client/exe/style.css Ada-development-Makefile/aws/demos/openid_client/exe/style.css
--- aws.upstream/demos/openid_client/exe/style.css	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/demos/openid_client/exe/style.css	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,31 @@
+body {
+  background: #fff;
+  color: #000;
+  text-decoration: none;
+}
+
+a:link {
+  background: #fff;
+  color: #036;
+}
+
+a:visited {
+  background: #ffff;
+  color: #800000;
+}
+
+h1 a {
+  background: #ffffff;
+  color: #000000;
+  text-decoration: none;
+}
+
+h1 a:visited {
+  background: #ffffff;
+  color: #000000;
+  text-decoration: none;
+}
+
+a:hover {
+  text-decoration: underline;
+}
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/demos/openid_client/.gitignore Ada-development-Makefile/aws/demos/openid_client/.gitignore
--- aws.upstream/demos/openid_client/.gitignore	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/demos/openid_client/.gitignore	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,5 @@
+configuration.ads
+exe/openid_demo
+exe/openid_demo.state.associations
+exe/openid_demo.state.authentications
+exe/*.log
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/demos/openid_client/logger.adb Ada-development-Makefile/aws/demos/openid_client/logger.adb
--- aws.upstream/demos/openid_client/logger.adb	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/demos/openid_client/logger.adb	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,168 @@
+-------------------------------------------------------------------------------
+--                                                                           --
+--                      Copyright (C) 2012-, AdaHeads K/S                    --
+--                                                                           --
+--  This is free software;  you can redistribute it and/or modify it         --
+--  under terms of the  GNU General Public License  as published by the      --
+--  Free Software  Foundation;  either version 3,  or (at your  option) any  --
+--  later version. This library is distributed in the hope that it will be   --
+--  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  --
+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     --
+--  You should have received a copy of the GNU General Public License and    --
+--  a copy of the GCC Runtime Library Exception along with this program;     --
+--  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+--  <http://www.gnu.org/licenses/>.                                          --
+--                                                                           --
+-------------------------------------------------------------------------------
+
+with Ada.Characters.Latin_1;
+with Ada.Text_IO;
+
+package body Logger is
+
+   protected File is
+      procedure Close;
+      --  Close the log file.
+
+      procedure Open
+        (Name : in String);
+      --  Open the Name log file.
+
+      procedure Put
+        (Message : in String;
+         Prefix  : in String);
+      --  Write Prefix Message to log file.
+   private
+      Log : Ada.Text_IO.File_Type;
+   end File;
+
+   protected body File is
+
+      -------------
+      --  Close  --
+      -------------
+
+      procedure Close
+      is
+      begin
+         Ada.Text_IO.Close (File => Log);
+      end Close;
+
+      ------------
+      --  Open  --
+      ------------
+
+      procedure Open
+        (Name : in String)
+      is
+      begin
+         Ada.Text_IO.Open (File => Log,
+                           Name => Name,
+                           Mode => Ada.Text_IO.Append_File);
+      exception
+         when others =>
+            Ada.Text_IO.Create (File => Log,
+                                Name => Name,
+                                Mode => Ada.Text_IO.Out_File);
+      end Open;
+
+      -----------
+      --  Put  --
+      -----------
+
+      procedure Put
+        (Message : in String;
+         Prefix  : in String)
+      is
+         Position : Positive := Message'First;
+      begin
+         Ada.Text_IO.Put (Log, " " & Prefix & " : ");
+         loop
+            loop
+               exit when Position > Message'Last;
+               exit when Message (Position) = Ada.Characters.Latin_1.LF;
+               exit when Message (Position) = Ada.Characters.Latin_1.CR;
+
+               Ada.Text_IO.Put (Log, Message (Position));
+               Position := Position + 1;
+            end loop;
+
+            loop
+               exit when Position > Message'Last;
+               exit when Message (Position) /= Ada.Characters.Latin_1.LF and
+                         Message (Position) /= Ada.Characters.Latin_1.CR;
+               Position := Position + 1;
+            end loop;
+
+            Ada.Text_IO.New_Line (Log);
+            exit when Position > Message'Last;
+            Ada.Text_IO.Put (Log, "_" & Prefix & "_: ");
+         end loop;
+      end Put;
+   end File;
+
+   -------------
+   --  Close  --
+   -------------
+
+   procedure Close is
+   begin
+      File.Close;
+   end Close;
+
+   -------------
+   --  Debug  --
+   -------------
+
+   procedure Debug
+     (Message : in String)
+   is
+   begin
+      File.Put ("Debug", Message);
+   end Debug;
+
+   -------------
+   --  Error  --
+   -------------
+
+   procedure Error
+     (Message : in String)
+   is
+   begin
+      File.Put ("Error", Message);
+   end Error;
+
+   ------------
+   --  Info  --
+   ------------
+
+   procedure Info
+     (Message : in String)
+   is
+   begin
+      File.Put ("Info", Message);
+   end Info;
+
+   ------------
+   --  Open  --
+   ------------
+
+   procedure Open
+     (File_Name : in String)
+   is
+   begin
+      File.Open (File_Name);
+   end Open;
+
+   ---------------
+   --  Warning  --
+   ---------------
+
+   procedure Warning
+     (Message : in String)
+   is
+   begin
+      File.Put ("Warning", Message);
+   end Warning;
+
+end Logger;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/demos/openid_client/logger.ads Ada-development-Makefile/aws/demos/openid_client/logger.ads
--- aws.upstream/demos/openid_client/logger.ads	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/demos/openid_client/logger.ads	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,43 @@
+-------------------------------------------------------------------------------
+--                                                                           --
+--                      Copyright (C) 2012-, AdaHeads K/S                    --
+--                                                                           --
+--  This is free software;  you can redistribute it and/or modify it         --
+--  under terms of the  GNU General Public License  as published by the      --
+--  Free Software  Foundation;  either version 3,  or (at your  option) any  --
+--  later version. This library is distributed in the hope that it will be   --
+--  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  --
+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     --
+--  You should have received a copy of the GNU General Public License and    --
+--  a copy of the GCC Runtime Library Exception along with this program;     --
+--  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+--  <http://www.gnu.org/licenses/>.                                          --
+--                                                                           --
+-------------------------------------------------------------------------------
+
+package Logger is
+
+   procedure Close;
+   --  Close the log file.
+
+   procedure Debug
+     (Message : in String);
+   --  Write a debug Message to log file.
+
+   procedure Error
+     (Message : in String);
+   --  Write an error Message to log file.
+
+   procedure Info
+     (Message : in String);
+   --  Write an info Message to log file.
+
+   procedure Open
+     (File_Name : in String);
+   --  Open the File_Name log file.
+
+   procedure Warning
+     (Message : in String);
+   --  Write a warning Message to log file.
+
+end Logger;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/demos/openid_client/makefile Ada-development-Makefile/aws/demos/openid_client/makefile
--- aws.upstream/demos/openid_client/makefile	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/demos/openid_client/makefile	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,25 @@
+-include ../../makefile.setup
+
+ifeq ($(PROCESSORS),)
+PROCESSORS=1
+endif
+
+ifeq ($(SERVER_NAME),)
+SERVER_NAME=localhost
+endif
+
+ifeq ($(OpenID),enabled)
+all: configuration.ads
+	gnatmake -j$(PROCESSORS) -P openid_demo
+else
+all:
+endif
+
+clean:
+	gnatclean -P openid_demo
+	@rm -rf configuration.ads
+
+configuration.ads:
+	@echo 'package Configuration is'                             > configuration.ads
+	@echo '   Host_Name : constant String := "$(SERVER_NAME)";' >> configuration.ads
+	@echo 'end Configuration;'                                  >> configuration.ads
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/demos/openid_client/openid_demo.adb Ada-development-Makefile/aws/demos/openid_client/openid_demo.adb
--- aws.upstream/demos/openid_client/openid_demo.adb	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/demos/openid_client/openid_demo.adb	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,69 @@
+-------------------------------------------------------------------------------
+--                                                                           --
+--                      Copyright (C) 2012-, AdaHeads K/S                    --
+--                                                                           --
+--  This is free software;  you can redistribute it and/or modify it         --
+--  under terms of the  GNU General Public License  as published by the      --
+--  Free Software  Foundation;  either version 3,  or (at your  option) any  --
+--  later version. This library is distributed in the hope that it will be   --
+--  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  --
+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     --
+--  You should have received a copy of the GNU General Public License and    --
+--  a copy of the GCC Runtime Library Exception along with this program;     --
+--  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+--  <http://www.gnu.org/licenses/>.                                          --
+--                                                                           --
+-------------------------------------------------------------------------------
+
+with Ada.Text_IO;
+
+with AWS.Config;
+with AWS.Log;
+with AWS.OpenID.Log;
+with AWS.OpenID.State;
+with AWS.Server;
+with AWS.Server.Log;
+
+with Configuration;
+with Logger;
+with OpenID_Handler;
+
+procedure OpenID_Demo is
+   Web_Server : AWS.Server.HTTP;
+begin
+   Logger.Open ("aws-openid.log");
+
+   AWS.OpenID.Log.Info    := Logger.Info'Access;
+   AWS.OpenID.Log.Error   := Logger.Error'Access;
+   AWS.OpenID.Log.Debug   := Logger.Debug'Access;
+   AWS.OpenID.Log.Warning := Logger.Warning'Access;
+
+   Ada.Text_IO.Put_Line ("AWS " & AWS.Version);
+   Ada.Text_IO.Put_Line ("Enter 'q' key to exit...");
+
+   AWS.Server.Set_Unexpected_Exception_Handler
+     (Web_Server => Web_Server,
+      Handler    => OpenID_Handler.Whoops'Access);
+
+   AWS.Server.Start (Web_Server => Web_Server,
+                     Dispatcher => OpenID_Handler.Get_Dispatcher,
+                     Config     => AWS.Config.Get_Current);
+
+   AWS.OpenID.State.Load (File_Name           => "openid_demo.state",
+                          Suppress_Exceptions => True);
+
+   AWS.Server.Log.Start (Web_Server      => Web_Server,
+                         Filename_Prefix => "openid_demo",
+                         Split_Mode      => AWS.Log.Daily);
+
+   Ada.Text_IO.Put_Line ("Please visit <https://" &
+                         Configuration.Host_Name & "/>.");
+
+   AWS.Server.Wait (AWS.Server.Q_Key_Pressed);
+
+   AWS.OpenID.State.Save (File_Name => "openid_demo.state");
+
+   AWS.Server.Shutdown (Web_Server);
+
+   Logger.Close;
+end OpenID_Demo;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/demos/openid_client/openid_demo.gpr Ada-development-Makefile/aws/demos/openid_client/openid_demo.gpr
--- aws.upstream/demos/openid_client/openid_demo.gpr	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/demos/openid_client/openid_demo.gpr	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,45 @@
+-------------------------------------------------------------------------------
+--                                                                           --
+--                       OpenID_Client Demo Project File                     --
+--                                                                           --
+--                      Copyright (C) 2012-, AdaHeads K/S                    --
+--                                                                           --
+--  This is free software;  you can redistribute it and/or modify it         --
+--  under terms of the  GNU General Public License  as published by the      --
+--  Free Software  Foundation;  either version 3,  or (at your  option) any  --
+--  later version. This library is distributed in the hope that it will be   --
+--  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  --
+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     --
+--  You should have received a copy of the GNU General Public License and    --
+--  a copy of the GCC Runtime Library Exception along with this program;     --
+--  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+--  <http://www.gnu.org/licenses/>.                                          --
+--                                                                           --
+-------------------------------------------------------------------------------
+
+with "aws";
+
+project OpenID_Demo is
+
+   for Source_Dirs use (".");
+
+   for Main use ("openid_demo.adb");
+
+   for Exec_Dir use "exe";
+
+   package Compiler is
+      for Default_Switches ("Ada")
+        use ("-fstack-check", --  Generate stack checking code (part of Ada)
+             "-gnata",        --  Enable assertions            (part of Ada)
+             "-gnato",        --  Overflow checking            (part of Ada)
+             "-gnatf",                      --  Full, verbose error messages
+             "-gnatwa",                     --  All optional warnings
+             "-gnatVa",                     --  All validity checks
+             "-gnaty3abcdefhiklmnoOprstux", --  Style checks
+             "-gnatwe",                     --  Treat warnings as errors
+             "-gnat2012",                   --  Use Ada 2012
+             "-Wall",
+             "-O2");                        --  Optimise (level 2/3)
+   end Compiler;
+
+end OpenID_Demo;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/demos/openid_client/openid_handler.adb Ada-development-Makefile/aws/demos/openid_client/openid_handler.adb
--- aws.upstream/demos/openid_client/openid_handler.adb	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/demos/openid_client/openid_handler.adb	2013-07-26 07:58:58.000000000 +0000
@@ -0,0 +1,205 @@
+-------------------------------------------------------------------------------
+--                                                                           --
+--                      Copyright (C) 2012-, AdaHeads K/S                    --
+--                                                                           --
+--  This is free software;  you can redistribute it and/or modify it         --
+--  under terms of the  GNU General Public License  as published by the      --
+--  Free Software  Foundation;  either version 3,  or (at your  option) any  --
+--  later version. This library is distributed in the hope that it will be   --
+--  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  --
+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     --
+--  You should have received a copy of the GNU General Public License and    --
+--  a copy of the GCC Runtime Library Exception along with this program;     --
+--  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+--  <http://www.gnu.org/licenses/>.                                          --
+--                                                                           --
+-------------------------------------------------------------------------------
+
+with AWS.Session;
+with AWS.Status;
+with AWS.Dispatchers.Callback;
+with AWS.Messages;
+with AWS.MIME;
+
+with AWS.OpenID.Authentication_Database;
+with AWS.OpenID.Error_Messages;
+with AWS.OpenID.Manual_Dispatching;
+
+with Configuration;
+
+with Ada.Text_IO;
+
+package body OpenID_Handler is
+
+   use AWS.OpenID.Error_Messages;
+
+   package OpenID is new AWS.OpenID.Manual_Dispatching
+     (Authentication_Failed => Authentication_Failed'Access,
+      Invalid_End_Point     => Invalid_End_Point'Access,
+      Invalid_URL           => Invalid_URL'Access,
+      Provider_Offline      => Provider_Offline'Access,
+      Host_Name             => Configuration.Host_Name);
+
+   procedure Increment_Hits
+     (Request : in AWS.Status.Data);
+   --  Add 1 to the "hits" session value.
+
+   function Index
+     (Request : in AWS.Status.Data)
+      return AWS.Response.Data;
+
+   function Logged_In
+     (Request : in AWS.Status.Data)
+      return AWS.Response.Data;
+
+   function Logged_Out
+     (Request : in AWS.Status.Data)
+      return AWS.Response.Data;
+
+   function Not_Authenticated
+     (Request : in AWS.Status.Data)
+      return AWS.Response.Data
+   is (AWS.Response.File (Content_Type => AWS.MIME.Text_HTML,
+                          Filename     => "not_authenticated.html"));
+
+   function Style_CSS
+     (Request : in AWS.Status.Data)
+      return AWS.Response.Data
+   is (AWS.Response.File (Content_Type => AWS.MIME.Text_HTML,
+                          Filename     => "style.css"));
+
+   ----------------------
+   --  Get_Dispatcher  --
+   ----------------------
+
+   function Get_Dispatcher
+     return AWS.Services.Dispatchers.URI.Handler
+   is
+   begin
+      return D : AWS.Services.Dispatchers.URI.Handler do
+         D.Register_Default_Callback
+           (AWS.Dispatchers.Callback.Create (Not_Authenticated'Access));
+
+         D.Register (URI => "/", Action => Index'Access);
+         D.Register (URI => "/index", Action => Index'Access);
+         D.Register (URI => "/index.html", Action => Index'Access);
+
+         D.Register (URI    => OpenID.Log_In.URI,
+                     Action => OpenID.Log_In.Callback);
+
+         D.Register (URI    => OpenID.Validate.URI,
+                     Action => OpenID.Validate.Callback);
+
+         D.Register (URI    => OpenID.Log_Out.URI,
+                     Action => OpenID.Log_Out.Callback);
+
+         D.Register (URI    => OpenID.Logged_In.URI,
+                     Action => Logged_In'Access);
+
+         D.Register (URI    => OpenID.Logged_Out.URI,
+                     Action => Logged_Out'Access);
+
+         D.Register (URI    => "/style.css",
+                     Action => Style_CSS'Access);
+      end return;
+   end Get_Dispatcher;
+
+   ----------------------
+   --  Increment_Hits  --
+   ----------------------
+
+   procedure Increment_Hits
+     (Request : in AWS.Status.Data)
+   is
+      use AWS.Session;
+      use AWS.Status;
+
+      Session_ID  : constant Id := Session (Request);
+   begin
+      Set (SID   => Session_ID,
+           Key   => "hits",
+           Value => Get (Session_ID, "hits") + 1);
+   end Increment_Hits;
+
+   -------------
+   --  Index  --
+   -------------
+
+   function Index
+     (Request : in AWS.Status.Data)
+      return AWS.Response.Data
+   is
+   begin
+      Increment_Hits (Request);
+
+      if AWS.OpenID.Authentication_Database.Is_Authenticated (Request) then
+         return AWS.Response.URL (OpenID.Logged_In.URI);
+      end if;
+
+      return AWS.Response.File (Content_Type => AWS.MIME.Text_HTML,
+                                Filename     => "index.html");
+   end Index;
+
+   -----------------
+   --  Logged_In  --
+   -----------------
+
+   function Logged_In
+     (Request : in AWS.Status.Data)
+      return AWS.Response.Data
+   is
+   begin
+      Increment_Hits (Request);
+
+      if AWS.OpenID.Authentication_Database.Is_Authenticated (Request) then
+         Ada.Text_IO.Put_Line
+           (Item => "Authenticated as <" &
+                    AWS.OpenID.Authentication_Database.Identity (Request) &
+                    " >.");
+         return AWS.Response.File (Content_Type => AWS.MIME.Text_HTML,
+                                   Filename     => "logged_in.html");
+      else
+         return AWS.Response.URL ("/");
+      end if;
+   end Logged_In;
+
+   ------------------
+   --  Logged_Out  --
+   ------------------
+
+   function Logged_Out
+     (Request : in AWS.Status.Data)
+      return AWS.Response.Data
+   is
+      use AWS.OpenID;
+   begin
+      Increment_Hits (Request);
+
+      if Authentication_Database.Is_Authenticated (Request) then
+         --  Apparently we didn't manage to actually log out the user or we've
+         --  landed here by mistake. Whatever the reason, this is a problem.
+         raise Program_Error with "Logged_Out called, but user not logged out";
+      else
+         return AWS.Response.File (Content_Type => AWS.MIME.Text_HTML,
+                                   Filename     => "logged_out.html");
+      end if;
+   end Logged_Out;
+
+   --------------
+   --  Whoops  --
+   --------------
+
+   procedure Whoops
+     (E      : in     Ada.Exceptions.Exception_Occurrence;
+      Log    : in out AWS.Log.Object;
+      Error  : in     AWS.Exceptions.Data;
+      Answer : in out AWS.Response.Data)
+   is
+      pragma Unreferenced (E, Log, Error);
+   begin
+      Answer := AWS.Response.File (Content_Type  => "text/html",
+                                   Filename      => "error.html",
+                                   Status_Code   => AWS.Messages.S500);
+   end Whoops;
+
+end OpenID_Handler;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/demos/openid_client/openid_handler.ads Ada-development-Makefile/aws/demos/openid_client/openid_handler.ads
--- aws.upstream/demos/openid_client/openid_handler.ads	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/demos/openid_client/openid_handler.ads	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,38 @@
+-------------------------------------------------------------------------------
+--                                                                           --
+--                      Copyright (C) 2012-, AdaHeads K/S                    --
+--                                                                           --
+--  This is free software;  you can redistribute it and/or modify it         --
+--  under terms of the  GNU General Public License  as published by the      --
+--  Free Software  Foundation;  either version 3,  or (at your  option) any  --
+--  later version. This library is distributed in the hope that it will be   --
+--  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  --
+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     --
+--  You should have received a copy of the GNU General Public License and    --
+--  a copy of the GCC Runtime Library Exception along with this program;     --
+--  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+--  <http://www.gnu.org/licenses/>.                                          --
+--                                                                           --
+-------------------------------------------------------------------------------
+
+with Ada.Exceptions;
+
+with AWS.Exceptions;
+with AWS.Log;
+with AWS.Response;
+with AWS.Services.Dispatchers.URI;
+
+package OpenID_Handler is
+
+   function Get_Dispatcher
+     return AWS.Services.Dispatchers.URI.Handler;
+   --  Return the dispatcher for the web server.
+
+   procedure Whoops
+     (E      : in     Ada.Exceptions.Exception_Occurrence;
+      Log    : in out AWS.Log.Object;
+      Error  : in     AWS.Exceptions.Data;
+      Answer : in out AWS.Response.Data);
+   --  Take care of unhandled exceptions.
+
+end OpenID_Handler;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/demos/openid_client/README Ada-development-Makefile/aws/demos/openid_client/README
--- aws.upstream/demos/openid_client/README	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/demos/openid_client/README	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,20 @@
+OpenID client demo
+==================
+
+Building:
+---------
+
+make
+
+
+Running:
+--------
+
+cd exe && sudo ./openid_demo
+
+
+Testing:
+--------
+
+Visit <https://localhost/> with your browser.
+
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/makefile Ada-development-Makefile/aws/makefile
--- aws.upstream/makefile	2013-10-28 13:01:44.000000000 +0000
+++ Ada-development-Makefile/aws/makefile	2013-10-28 11:58:48.000000000 +0000
@@ -63,7 +63,8 @@
 	SOEXT="$(SOEXT)" BUILD_DOC_SCRIPT="false" GNAT="$(GNAT)" \
 	T2A="../../$(BDIR)/static/tools/templates2ada" \
 	LIBRARY_TYPE="$(LIBRARY_TYPE)" PYTHON="$(PYTHON)" \
-	TARGET="$(TARGET)" IS_CROSS=$(IS_CROSS) GPRINSTALL="$(GPRINSTALL)"
+	TARGET="$(TARGET)" IS_CROSS=$(IS_CROSS) GPRINSTALL="$(GPRINSTALL)" OpenID="$(OpenID)" \
+	AUTHENTICATION_DATABASE_IMPLEMENTATION="$(AUTHENTICATION_DATABASE_IMPLEMENTATION)"
 
 build-doc:
 	echo ""
@@ -183,7 +184,8 @@
 		-XPRJ_ASIS=$(PRJ_ASIS) -XPRJ_LDAP=$(PRJ_LDAP) \
 		-XPRJ_XMLADA=$(PRJ_XMLADA) -XTARGET=$(TARGET) \
 		-XPROCESSORS=$(PROCESSORS) -XSOCKET=$(SOCKET) \
-		-XPRJ_TARGET=$(PRJ_TARGET)
+		-XPRJ_TARGET=$(PRJ_TARGET) -XOpenID=$(OpenID) \
+		-XAUTHENTICATION_DATABASE_IMPLEMENTATION=$(AUTHENTICATION_DATABASE_IMPLEMENTATION)
 
 #######################################################################
 #  build
@@ -356,6 +358,8 @@
 	echo "ASIS=$(ASIS)" >> makefile.setup
 	echo "IPv6=$(IPv6)" >> makefile.setup
 	echo "SOCKET=$(SOCKET)" >> makefile.setup
+	echo "OpenID=$(OpenID)" >> makefile.setup
+	echo "AUTHENTICATION_DATABASE_IMPLEMENTATION=$(AUTHENTICATION_DATABASE_IMPLEMENTATION)" >> makefile.setup
 	echo "LDAP=$(LDAP)" >> makefile.setup
 	echo "DEBUG=$(DEBUG)" >> makefile.setup
 	echo "PROCESSORS=$(PROCESSORS)" >> makefile.setup
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/makefile.checks Ada-development-Makefile/aws/makefile.checks
--- aws.upstream/makefile.checks	2013-10-28 13:01:44.000000000 +0000
+++ Ada-development-Makefile/aws/makefile.checks	2013-10-28 11:58:48.000000000 +0000
@@ -86,6 +86,26 @@
 endif
 endif
 
+ifneq ($(OpenID), enabled)
+ifneq ($(OpenID), disabled)
+$(error OpenID variable must be set to enabled or disabled)
+endif
+endif
+
+ifeq ($(OpenID), enabled)
+ifeq ($(SOCKET), std)
+$(error OpenID requires SSL/TLS, $(SOCKET) sockets is not sufficient)
+endif
+endif
+
+ifeq ($(OpenID), enabled)
+ifneq ($(AUTHENTICATION_DATABASE_IMPLEMENTATION), session_cookies)
+ifneq ($(AUTHENTICATION_DATABASE_IMPLEMENTATION), hashed_map)
+$(error AUTHENTICATION_DATABASE_IMPLEMENTATION variable must be set to session_cookies or hashed_map)
+endif
+endif
+endif
+
 ifneq ($(INSTALL), )
 $(error INSTALL variable is deprecated, please use prefix instead)
 endif
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/makefile.conf Ada-development-Makefile/aws/makefile.conf
--- aws.upstream/makefile.conf	2013-10-28 13:01:44.000000000 +0000
+++ Ada-development-Makefile/aws/makefile.conf	2013-10-28 11:58:48.000000000 +0000
@@ -97,6 +97,16 @@
 SOCKET	= std
 
 ##############################################################################
+# OpenID, optional. If you want to use OpenID authentication change the OpenID
+# variable below to true.
+#
+# OpenID                                 = [enabled|disabled]
+# AUTHENTICATION_DATABASE_IMPLEMENTATION = [session_cookies|hashed_map]
+#
+OpenID                                 = $(shell test $(SOCKET) = openssl -o $(SOCKET) = gnutls && echo enabled || echo disabled)
+AUTHENTICATION_DATABASE_IMPLEMENTATION = session_cookies
+
+##############################################################################
 # AWS provides a binding to the LDAP API. This binding will use the standard
 # LDAP DLL provided with Windows OS. On GNU/Linux you need to install OpenLDAP
 # if it is not already installed. If LDAP is installed on your system you can
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/readme.txt Ada-development-Makefile/aws/readme.txt
--- aws.upstream/readme.txt	2013-10-28 13:01:44.000000000 +0000
+++ Ada-development-Makefile/aws/readme.txt	2013-10-28 11:58:48.000000000 +0000
@@ -14,7 +14,7 @@
 Server. AWS is fully developed in Ada with GNAT.
 
 AWS support SOAP/WSDL, Server Push, HTTPS/SSL, client HTTP, hotplug
-modules...
+modules, OpenID authentication...
 
 AWS comes with SOAP/WSDL support, two tools are proposed:
 
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/shared.gpr Ada-development-Makefile/aws/shared.gpr
--- aws.upstream/shared.gpr	2013-10-28 13:01:44.000000000 +0000
+++ Ada-development-Makefile/aws/shared.gpr	2013-10-28 11:58:48.000000000 +0000
@@ -35,6 +35,13 @@
    SOCKLIB : SOCKLIB_Type := external ("PRJ_SOCKLIB", "GNAT");
 
    ------------
+   -- OpenID --
+   ------------
+
+   type OpenID_Selection is ("enabled", "disabled");
+   OpenID : OpenID_Selection := external ("OpenID");
+
+   ------------
    -- SOCKET --
    ------------
 
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/authentication_database-hashed_map/aws-openid-authentication_database.adb Ada-development-Makefile/aws/src/openid/authentication_database-hashed_map/aws-openid-authentication_database.adb
--- aws.upstream/src/openid/authentication_database-hashed_map/aws-openid-authentication_database.adb	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/authentication_database-hashed_map/aws-openid-authentication_database.adb	2013-10-28 12:27:25.000000000 +0000
@@ -0,0 +1,333 @@
+-------------------------------------------------------------------------------
+--                                                                           --
+--                      Copyright (C) 2012-, AdaHeads K/S                    --
+--                                                                           --
+--  This is free software;  you can redistribute it and/or modify it         --
+--  under terms of the  GNU General Public License  as published by the      --
+--  Free Software  Foundation;  either version 3,  or (at your  option) any  --
+--  later version. This library is distributed in the hope that it will be   --
+--  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  --
+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     --
+--  You should have received a copy of the GNU General Public License and    --
+--  a copy of the GCC Runtime Library Exception along with this program;     --
+--  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+--  <http://www.gnu.org/licenses/>.                                          --
+--                                                                           --
+-------------------------------------------------------------------------------
+
+with Ada.Characters.Handling;
+with Ada.Containers.Indefinite_Hashed_Maps;
+with Ada.Exceptions;
+with Ada.Numerics.Discrete_Random;
+with Ada.Strings.Fixed.Hash;
+
+with AWS.Cookie;
+
+with AWS.OpenID.Log;
+
+package body AWS.OpenID.Authentication_Database is
+
+   Token_Lifetime    : constant Duration := 3600.0;
+   Token_Cookie_Name : constant String := "token";
+
+   subtype Authentication_Token is String (1 .. 42);
+
+   package Random_Characters is new
+     Ada.Numerics.Discrete_Random (Ada.Characters.Handling.ISO_646);
+
+   package Maps is new Ada.Containers.Indefinite_Hashed_Maps
+     (Key_Type        => Authentication_Token,
+      Hash            => Ada.Strings.Fixed.Hash,
+      Equivalent_Keys => "=",
+      Element_Type    => String,
+      "="             => "=");
+
+   protected Database is
+      procedure Delete
+        (Token :    String);
+      --  Delete Token from the authentication database.
+
+      function Has
+        (Token :    String)
+         return Boolean;
+      --  Return True if Token exists in the authentication database.
+
+      function Identity
+        (Token :    String)
+         return String;
+      --  Return the identity of Token.
+
+      procedure Insert
+        (Identity :        String;
+         Token    :    out Authentication_Token);
+      --  Insert identity into the authentiation database with Token as key.
+   private
+      Authentications : Maps.Map := Maps.Empty_Map;
+      Token_Generator : Random_Characters.Generator;
+   end Database;
+
+   protected body Database is
+
+      --------------
+      --  Delete  --
+      --------------
+
+      procedure Delete
+        (Token :    String)
+      is
+      begin
+         Log.Info
+           (Message => "Removing <" & Token &
+              "> from the authentication database.");
+
+         Authentications.Delete (Token);
+      exception
+         when others =>
+            if Authentications.Contains (Token) then
+               raise;
+            end if;
+      end Delete;
+
+      -----------
+      --  Has  --
+      -----------
+
+      function Has
+        (Token :    String)
+         return Boolean
+      is
+      begin
+         Log.Info ("Looking up if <" & Token &
+                     "> exists in the authentication database.");
+
+         return Authentications.Contains (Token);
+      end Has;
+
+      ----------------
+      --  Identity  --
+      ----------------
+
+      function Identity
+        (Token :    String)
+         return String
+      is
+      begin
+         Log.Info ("Looking <" & Token &
+                     "> up in the authentication database.");
+
+         return Authentications.Element (Token);
+      exception
+         when Constraint_Error =>
+            if Authentications.Contains (Token) then
+               raise;
+            else
+               raise Not_Authenticated;
+            end if;
+      end Identity;
+
+      --------------
+      --  Insert  --
+      --------------
+
+      procedure Insert
+        (Identity :        String;
+         Token    :    out Authentication_Token)
+      is
+         procedure Generate_Random
+           (Token : out Authentication_Token);
+
+         -----------------------
+         --  Generate_Random  --
+         -----------------------
+
+         procedure Generate_Random
+           (Token : out Authentication_Token)
+         is
+            use Ada.Characters.Handling;
+         begin
+            for Index in Token'Range loop
+               loop
+                  Token (Index) := Random_Characters.Random (Token_Generator);
+
+                  exit when Is_Letter (Token (Index)) or
+                    Is_Digit (Token (Index));
+               end loop;
+            end loop;
+         end Generate_Random;
+      begin
+         Search_For_Unused_Token :
+         loop
+            Generate_Random (Token);
+
+            if not Authentications.Contains (Token) then
+               Authentications.Insert (Token, Identity);
+
+               exit Search_For_Unused_Token;
+            end if;
+         end loop Search_For_Unused_Token;
+      exception
+         when others =>
+            Log.Error ("Failed to insert <" & Identity & "> into the " &
+                         "authentication database with the token <" &
+                         Token & ">.");
+            Log.Error ("Current database capacity: " &
+                         Authentications.Capacity'Img);
+            Log.Error ("Hash value: " &
+                         Ada.Strings.Fixed.Hash (Token)'Img);
+
+            raise;
+      end Insert;
+
+   end Database;
+
+   -----------------------
+   --  Delete_Identity  --
+   -----------------------
+
+   procedure Delete_Identity
+     (Request  :        AWS.Status.Data;
+      Response : in out AWS.Response.Data)
+   is
+      use Ada.Exceptions;
+
+      Token : Authentication_Token;
+   begin
+      Token := AWS.Cookie.Get (Request => Request,
+                               Key     => Token_Cookie_Name);
+
+      Database.Delete (Token);
+
+      AWS.Cookie.Expire (Content => Response,
+                         Key     => Token_Cookie_Name);
+   exception
+      when E : others =>
+         Log.Error ("Exception in Authentication_Database.Delete: " &
+                      Exception_Name (E));
+         raise;
+   end Delete_Identity;
+
+   ----------------
+   --  Identity  --
+   ----------------
+
+   function Identity
+     (Request :    AWS.Status.Data)
+      return String
+   is
+      use Ada.Exceptions;
+   begin
+      return Database.Identity (AWS.Cookie.Get (Request, Token_Cookie_Name));
+   exception
+      when Not_Authenticated | Constraint_Error =>
+         raise;
+      when E : others =>
+         Log.Error ("Exception in Authentication_Database.Identity: " &
+                      Exception_Name (E));
+         raise;
+   end Identity;
+
+   ------------------------
+   --  Is_Authenticated  --
+   ------------------------
+
+   function Is_Authenticated
+     (Request  :    AWS.Status.Data)
+      return Boolean
+   is
+      use Ada.Exceptions;
+   begin
+      return Database.Has (AWS.Cookie.Get (Request, Token_Cookie_Name));
+   exception
+      when Constraint_Error =>
+         return False;
+      when E : others =>
+         Log.Error ("Exception in Authentication_Database." &
+                      "Is_Authenticated: " &
+                      Exception_Name (E) & " (" &
+                      Exception_Information (E) & ")");
+         raise;
+   end Is_Authenticated;
+
+   ------------
+   --  Load  --
+   ------------
+
+   procedure Load
+     (File_Name :    String)
+   is
+   begin
+      null;
+   end Load;
+
+   -------------------------
+   --  Register_Identity  --
+   -------------------------
+
+   procedure Register_Identity
+     (Source   :        AWS.OpenID.Security.Authentication;
+      Request  :        AWS.Status.Data;
+      Response : in out AWS.Response.Data)
+   is
+      pragma Unreferenced (Request);
+
+      use Ada.Exceptions;
+
+      Token : Authentication_Token;
+   begin
+      if Security.Authenticated (Source) then
+         Database.Insert (Security.Identity (Source), Token);
+
+         AWS.Cookie.Set (Content => Response,
+                         Key     => Token_Cookie_Name,
+                         Value   => Token,
+                         Max_Age => Token_Lifetime);
+      else
+         raise Not_Authenticated;
+      end if;
+   exception
+      when Not_Authenticated =>
+         raise;
+      when E : others =>
+         Log.Error ("Exception in Authentication_Database." &
+                      "Register_Identity: " &
+                      Exception_Name (E) & " (" &
+                      Exception_Information (E) & ")");
+         raise;
+   end Register_Identity;
+
+   procedure Register_Identity (Identity :        AWS.URL.Object;
+                                Request  :        AWS.Status.Data;
+                                Response : in out AWS.Response.Data) is
+      pragma Unreferenced (Request);
+
+      use Ada.Exceptions;
+
+      Token : Authentication_Token;
+   begin
+      Database.Insert (AWS.URL.URL (Identity), Token);
+
+      AWS.Cookie.Set (Content => Response,
+                      Key     => Token_Cookie_Name,
+                      Value   => Token,
+                      Max_Age => Token_Lifetime);
+   exception
+      when E : others =>
+         Log.Error ("Exception in Authentication_Database." &
+                      "Register_Identity: " &
+                      Exception_Name (E) & " (" &
+                      Exception_Information (E) & ")");
+         raise;
+   end Register_Identity;
+
+   ------------
+   --  Save  --
+   ------------
+
+   procedure Save
+     (File_Name :    String)
+   is
+   begin
+      null;
+   end Save;
+
+end AWS.OpenID.Authentication_Database;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/authentication_database-session_cookies/aws-openid-authentication_database.adb Ada-development-Makefile/aws/src/openid/authentication_database-session_cookies/aws-openid-authentication_database.adb
--- aws.upstream/src/openid/authentication_database-session_cookies/aws-openid-authentication_database.adb	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/authentication_database-session_cookies/aws-openid-authentication_database.adb	2013-10-28 12:27:31.000000000 +0000
@@ -0,0 +1,165 @@
+-------------------------------------------------------------------------------                                                                      --
+--                                                                           --
+--                      Copyright (C) 2012-, AdaHeads K/S                    --
+--                                                                           --
+--  This is free software;  you can redistribute it and/or modify it         --
+--  under terms of the  GNU General Public License  as published by the      --
+--  Free Software  Foundation;  either version 3,  or (at your  option) any  --
+--  later version. This library is distributed in the hope that it will be   --
+--  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  --
+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     --
+--  You should have received a copy of the GNU General Public License and    --
+--  a copy of the GCC Runtime Library Exception along with this program;     --
+--  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+--  <http://www.gnu.org/licenses/>.                                          --
+--                                                                           --
+-------------------------------------------------------------------------------
+
+with Ada.Exceptions;
+
+with AWS.Session;
+
+with AWS.OpenID.Log;
+
+package body AWS.OpenID.Authentication_Database is
+
+   Session_Key : constant String := "OpenID.Identity";
+
+   -----------------------
+   --  Delete_Identity  --
+   -----------------------
+
+   procedure Delete_Identity
+     (Request  :        AWS.Status.Data;
+      Response : in out AWS.Response.Data)
+   is
+      pragma Unreferenced (Response);
+
+      use Ada.Exceptions;
+      use AWS.OpenID;
+   begin
+      AWS.Session.Remove (SID => AWS.Status.Session (Request),
+                          Key => Session_Key);
+   exception
+      when E : others =>
+         Log.Error ("Exception in Authentication_Database.Delete: " &
+                      Exception_Name (E));
+         raise;
+   end Delete_Identity;
+
+   ----------------
+   --  Identity  --
+   ----------------
+
+   function Identity
+     (Request :    AWS.Status.Data)
+      return String
+   is
+      use Ada.Exceptions;
+      use AWS.OpenID;
+   begin
+      if AWS.Session.Exist (SID => AWS.Status.Session (Request),
+                            Key => Session_Key)
+      then
+         return AWS.Session.Get (SID => AWS.Status.Session (Request),
+                                 Key => Session_Key);
+      else
+         raise Not_Authenticated;
+      end if;
+   exception
+      when Not_Authenticated =>
+         raise;
+      when E : others =>
+         Log.Error ("Exception in Authentication_Database.Identity: " &
+                      Exception_Name (E));
+         raise;
+   end Identity;
+
+   ------------------------
+   --  Is_Authenticated  --
+   ------------------------
+
+   function Is_Authenticated
+     (Request :    AWS.Status.Data)
+      return Boolean
+   is
+      use Ada.Exceptions;
+      use AWS.OpenID;
+   begin
+      return AWS.Session.Exist (SID => AWS.Status.Session (Request),
+                                Key => Session_Key);
+   exception
+      when E : others =>
+         Log.Error ("Exception in Authentication_Database." &
+                      "Is_Authenticated: " &
+                      Exception_Name (E) & " (" &
+                      Exception_Information (E) & ")");
+         raise;
+   end Is_Authenticated;
+
+   ------------
+   --  Load  --
+   ------------
+
+   procedure Load
+     (File_Name :    String)
+      renames AWS.Session.Load;
+
+   -------------------------
+   --  Register_Identity  --
+   -------------------------
+
+   procedure Register_Identity
+     (Source   :        AWS.OpenID.Security.Authentication;
+      Request  :        AWS.Status.Data;
+      Response : in out AWS.Response.Data)
+   is
+      pragma Unreferenced (Response);
+
+      use Ada.Exceptions;
+      use AWS.OpenID;
+      use type AWS.Session.Id;
+
+      ID : constant AWS.Session.Id := AWS.Status.Session (Request);
+   begin
+      if ID /= AWS.Session.No_Session then
+         AWS.Session.Set (SID   => ID,
+                          Key   => Session_Key,
+                          Value => AWS.OpenID.Security.Identity (Source));
+      end if;
+   exception
+      when E : others =>
+         Log.Error ("Exception in Authentication_Database." &
+                      "Register_Identity: " &
+                      Exception_Name (E) & " (" &
+                      Exception_Information (E) & ")");
+         raise;
+   end Register_Identity;
+
+   procedure Register_Identity (Identity :        AWS.URL.Object;
+                                Request  :        AWS.Status.Data;
+                                Response : in out AWS.Response.Data) is
+      pragma Unreferenced (Response);
+
+      use Ada.Exceptions;
+      use AWS.OpenID;
+      use type AWS.Session.Id;
+
+      ID : constant AWS.Session.Id := AWS.Status.Session (Request);
+   begin
+      if ID /= AWS.Session.No_Session then
+         AWS.Session.Set (SID   => ID,
+                          Key   => Session_Key,
+                          Value => AWS.URL.URL (Identity));
+      end if;
+   end Register_Identity;
+
+   ------------
+   --  Save  --
+   ------------
+
+   procedure Save
+     (File_Name :    String)
+      renames AWS.Session.Save;
+
+end AWS.OpenID.Authentication_Database;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid.ads Ada-development-Makefile/aws/src/openid/aws-openid.ads
--- aws.upstream/src/openid/aws-openid.ads	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid.ads	2013-06-20 12:44:08.000000000 +0000
@@ -0,0 +1,26 @@
+-------------------------------------------------------------------------------
+--                                                                           --
+--                      Copyright (C) 2012-, AdaHeads K/S                    --
+--                                                                           --
+--  This is free software;  you can redistribute it and/or modify it         --
+--  under terms of the  GNU General Public License  as published by the      --
+--  Free Software  Foundation;  either version 3,  or (at your  option) any  --
+--  later version. This library is distributed in the hope that it will be   --
+--  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  --
+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     --
+--  You should have received a copy of the GNU General Public License and    --
+--  a copy of the GCC Runtime Library Exception along with this program;     --
+--  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+--  <http://www.gnu.org/licenses/>.                                          --
+--                                                                           --
+-------------------------------------------------------------------------------
+
+package AWS.OpenID is
+
+   pragma Pure (AWS.OpenID);
+
+   Not_Authenticated : exception;
+
+   Provider_Parameter_Name : constant String := "openid";
+
+end AWS.OpenID;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-association_database.adb Ada-development-Makefile/aws/src/openid/aws-openid-association_database.adb
--- aws.upstream/src/openid/aws-openid-association_database.adb	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-association_database.adb	2013-06-20 12:44:08.000000000 +0000
@@ -0,0 +1,313 @@
+-------------------------------------------------------------------------------
+--                                                                           --
+--                      Copyright (C) 2012-, AdaHeads K/S                    --
+--                                                                           --
+--  This is free software;  you can redistribute it and/or modify it         --
+--  under terms of the  GNU General Public License  as published by the      --
+--  Free Software  Foundation;  either version 3,  or (at your  option) any  --
+--  later version. This library is distributed in the hope that it will be   --
+--  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  --
+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     --
+--  You should have received a copy of the GNU General Public License and    --
+--  a copy of the GCC Runtime Library Exception along with this program;     --
+--  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+--  <http://www.gnu.org/licenses/>.                                          --
+--                                                                           --
+-------------------------------------------------------------------------------
+
+with Ada.Containers.Doubly_Linked_Lists;
+with Ada.Containers.Hashed_Maps;
+with Ada.Exceptions;
+with Ada.Streams.Stream_IO;
+with Ada.Strings.Unbounded;
+with Ada.Strings.Unbounded.Hash;
+
+with AWS.OpenID.Log;
+
+package body AWS.OpenID.Association_Database is
+
+   package Maps is new Ada.Containers.Hashed_Maps
+     (Key_Type        => Security.Association_Handle,
+      Hash            => Ada.Strings.Unbounded.Hash,
+      Equivalent_Keys => Ada.Strings.Unbounded."=",
+      Element_Type    => Security.Association,
+      "="             => Security."=");
+
+   package Stale_List is new Ada.Containers.Doubly_Linked_Lists
+     (Element_Type => Security.Association_Handle,
+      "="          => Ada.Strings.Unbounded."=");
+
+   Stale_Associations : Stale_List.List;
+
+   protected Database is
+      procedure Clean_Up;
+      --  Delete all expired Associations.
+
+      function Has
+        (Handle : Security.Association_Handle)
+         return Boolean;
+      --  Return True if Handle is in the associations database.
+
+      procedure Insert
+        (Item : Security.Association);
+      --  Insert Item into the associations database.
+
+      procedure Load
+        (File_Name : String);
+      --  Load File_Name into the associations database.
+
+      function Look_Up
+        (Handle : Security.Association_Handle)
+         return Security.Association;
+      --  Reuturn the Handle association.
+
+      procedure Save
+        (File_Name : String);
+      --  Save the association database to File_Name
+   private
+      Associations : Maps.Map := Maps.Empty_Map;
+   end Database;
+
+   ----------------
+   --  Database  --
+   ----------------
+
+   protected body Database is
+
+      ----------------
+      --  Clean_Up  --
+      ----------------
+
+      procedure Clean_Up
+      is
+      begin
+         for C in Associations.Iterate loop
+            if Security.Is_Expired (Maps.Element (C)) then
+               Stale_Associations.Append (Maps.Key (C));
+            end if;
+         end loop;
+
+         for Handle of Stale_Associations loop
+            Associations.Exclude (Handle);
+         end loop;
+      end Clean_Up;
+
+      -----------
+      --  Has  --
+      -----------
+
+      function Has
+        (Handle : Security.Association_Handle)
+         return Boolean
+      is
+         use Ada.Strings.Unbounded;
+      begin
+         Log.Info ("Looking up if <" &
+                     To_String (Handle) &
+                     "> exists in the association database.");
+
+         return Associations.Contains (Handle);
+      end Has;
+
+      --------------
+      --  Insert  --
+      --------------
+
+      procedure Insert
+        (Item : Security.Association)
+      is
+         use Ada.Strings.Unbounded;
+
+         Key : constant Security.Association_Handle := Security.Handle (Item);
+      begin
+         Associations.Insert (Key, Item);
+      exception
+         when others =>
+            Log.Error ("Failed to insert <" &
+                 Security.To_String (Item) &
+                 "> into the association database with the handle <" &
+                 To_String (Key) & ">.");
+            Log.Error ("Current database capacity: " &
+                         Associations.Capacity'Img);
+            Log.Error ("Hash value: " & Hash (Key)'Img);
+            raise;
+      end Insert;
+
+      ------------
+      --  Load  --
+      ------------
+
+      procedure Load
+        (File_Name : String)
+      is
+         use Ada.Streams.Stream_IO;
+
+         File    : File_Type;
+         Source  : Stream_Access;
+         Key     : Security.Association_Handle;
+         Element : Security.Association;
+      begin
+         Open (File => File,
+               Name => File_Name,
+               Mode => In_File);
+         Source := Stream (File);
+
+         while not End_Of_File (File) loop
+            Key     := Security.Association_Handle'Input (Source);
+            Element := Security.Association'Input (Source);
+
+            if not Security.Is_Expired (Element) then
+               Associations.Insert (Key, Element);
+            end if;
+         end loop;
+
+         Close (File);
+      end Load;
+
+      ---------------
+      --  Look_Up  --
+      ---------------
+
+      function Look_Up
+        (Handle : Security.Association_Handle)
+         return Security.Association
+      is
+         use Ada.Strings.Unbounded;
+      begin
+         Log.Info ("Looking <" &
+                     To_String (Handle) &
+                     "> up in the association database.");
+
+         return Associations.Element (Handle);
+      end Look_Up;
+
+      ------------
+      --  Save  --
+      ------------
+
+      procedure Save
+        (File_Name : String)
+      is
+         use Ada.Streams.Stream_IO;
+
+         procedure Save
+           (Position : Maps.Cursor);
+
+         File    : File_Type;
+         Target  : Stream_Access;
+
+         ------------
+         --  Save  --
+         ------------
+
+         procedure Save
+           (Position : Maps.Cursor)
+         is
+         begin
+            if not Security.Is_Expired (Maps.Element (Position)) then
+               AWS.OpenID.Security.Association_Handle'Output
+                 (Target, Maps.Key (Position));
+
+               AWS.OpenID.Security.Association'Output
+                 (Target, Maps.Element (Position));
+            end if;
+         end Save;
+      begin
+         Create (File => File,
+                 Name => File_Name);
+         Target := Stream (File);
+
+         Associations.Iterate (Process => Save'Access);
+
+         Close (File => File);
+      end Save;
+
+   end Database;
+
+   ----------------
+   --  Clean_Up  --
+   ----------------
+
+   procedure Clean_Up
+   is
+   begin
+      Database.Clean_Up;
+   end Clean_Up;
+
+   ------------------
+   --  Has_Handle  --
+   ------------------
+
+   function Has_Handle
+     (Handle : Security.Association_Handle)
+      return Boolean
+   is
+      use Ada.Exceptions;
+   begin
+      return Database.Has (Handle);
+   exception
+      when E : others =>
+         Log.Error ("Exception in Association_Database.Has: " &
+                      Exception_Name (E));
+         raise;
+   end Has_Handle;
+
+   --------------------------
+   --  Insert_Association  --
+   --------------------------
+
+   procedure Insert_Association
+     (Item : Security.Association)
+   is
+      use Ada.Exceptions;
+   begin
+      Database.Insert (Item);
+   exception
+      when E : others =>
+         Log.Error ("Exception in Association_Database.Insert: " &
+                      Exception_Name (E) & " (" &
+                      Exception_Information (E) & ")");
+         raise;
+   end Insert_Association;
+
+   ------------
+   --  Load  --
+   ------------
+
+   procedure Load
+     (File_Name : String)
+   is
+   begin
+      Database.Load (File_Name);
+   end Load;
+
+   ----------------------------------
+   --  Look_Up_Association_Handle  --
+   ----------------------------------
+
+   function Look_Up_Association_Handle
+     (Handle : Security.Association_Handle)
+      return Security.Association
+   is
+      use Ada.Exceptions;
+   begin
+      return Database.Look_Up (Handle);
+   exception
+      when E : others =>
+         Log.Error ("Exception in Association_Database.Look_Up: " &
+                      Exception_Name (E));
+         raise;
+   end Look_Up_Association_Handle;
+
+   ------------
+   --  Save  --
+   ------------
+
+   procedure Save
+     (File_Name : String)
+   is
+   begin
+      Database.Save (File_Name);
+   end Save;
+
+end AWS.OpenID.Association_Database;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-association_database.ads Ada-development-Makefile/aws/src/openid/aws-openid-association_database.ads
--- aws.upstream/src/openid/aws-openid-association_database.ads	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-association_database.ads	2013-10-28 11:44:52.000000000 +0000
@@ -0,0 +1,71 @@
+-------------------------------------------------------------------------------
+--                                                                           --
+--                      Copyright (C) 2012-, AdaHeads K/S                    --
+--                                                                           --
+--  This is free software;  you can redistribute it and/or modify it         --
+--  under terms of the  GNU General Public License  as published by the      --
+--  Free Software  Foundation;  either version 3,  or (at your  option) any  --
+--  later version. This library is distributed in the hope that it will be   --
+--  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  --
+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     --
+--  You should have received a copy of the GNU General Public License and    --
+--  a copy of the GCC Runtime Library Exception along with this program;     --
+--  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+--  <http://www.gnu.org/licenses/>.                                          --
+--                                                                           --
+-------------------------------------------------------------------------------
+
+with AWS.OpenID.Security;
+
+private
+package AWS.OpenID.Association_Database is
+
+   procedure Clean_Up;
+   --  Remove all stale Associations from the database. Calling Clean_Up is a
+   --  manual process. The library does _NOT_ handle this automatically. It is
+   --  left to the user of the library to decide when and how often to clean
+   --  the associations database.
+
+   type Has_Association_Handle_Type is access function
+     (Handle : Security.Association_Handle)
+      return Boolean;
+
+   function Has_Handle
+     (Handle : Security.Association_Handle)
+      return Boolean;
+   --  Return True if Handle is in the associations database.
+
+   Has : Has_Association_Handle_Type := Has_Handle'Access;
+
+   type Insert_Association_Type is access procedure
+     (Item : Security.Association);
+
+   procedure Insert_Association
+     (Item : Security.Association);
+   --  Insert Item into the associations database.
+
+   Insert : Insert_Association_Type := Insert_Association'Access;
+
+   procedure Load
+     (File_Name : String);
+   --  Load File_Name into the associations database. Do not call Load if
+   --  you've setup your own Has, Insert and Look_Up handlers.
+
+   type Look_Up_Association_Handle_Type is access function
+     (Handle : Security.Association_Handle)
+     return Security.Association;
+
+   function Look_Up_Association_Handle
+     (Handle : Security.Association_Handle)
+      return Security.Association;
+   --  Reuturn the Handle association.
+
+   Look_Up : Look_Up_Association_Handle_Type :=
+               Look_Up_Association_Handle'Access;
+
+   procedure Save
+     (File_Name : String);
+   --  Save the association database to File_Name. Do not call Save if you've
+   --  set your own Has, Insert and Look_Up handlers.
+
+end AWS.OpenID.Association_Database;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-authentication_database.ads Ada-development-Makefile/aws/src/openid/aws-openid-authentication_database.ads
--- aws.upstream/src/openid/aws-openid-authentication_database.ads	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-authentication_database.ads	2013-10-28 12:27:45.000000000 +0000
@@ -0,0 +1,61 @@
+-------------------------------------------------------------------------------
+--                                                                           --
+--                      Copyright (C) 2012-, AdaHeads K/S                    --
+--                                                                           --
+--  This is free software;  you can redistribute it and/or modify it         --
+--  under terms of the  GNU General Public License  as published by the      --
+--  Free Software  Foundation;  either version 3,  or (at your  option) any  --
+--  later version. This library is distributed in the hope that it will be   --
+--  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  --
+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     --
+--  You should have received a copy of the GNU General Public License and    --
+--  a copy of the GCC Runtime Library Exception along with this program;     --
+--  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+--  <http://www.gnu.org/licenses/>.                                          --
+--                                                                           --
+-------------------------------------------------------------------------------
+
+with AWS.Response;
+with AWS.Status;
+with AWS.URL;
+
+with AWS.OpenID.Security;
+
+private
+package AWS.OpenID.Authentication_Database is
+
+   procedure Delete_Identity
+     (Request  :        AWS.Status.Data;
+      Response : in out AWS.Response.Data);
+   --  Delete an identity from the authentication database.
+
+   function Identity
+     (Request :    AWS.Status.Data)
+      return String;
+   --  Return the identity string from the authentication database.
+
+   function Is_Authenticated
+     (Request  :    AWS.Status.Data)
+      return Boolean;
+   --  Return True if the user is authenticated.
+
+   procedure Load
+     (File_Name :    String);
+   --  Load File_Name into the authentication database.
+
+   procedure Register_Identity
+     (Source   :        AWS.OpenID.Security.Authentication;
+      Request  :        AWS.Status.Data;
+      Response : in out AWS.Response.Data);
+   --  Register a new identity in the authentication database.
+
+   procedure Register_Identity (Identity :        AWS.URL.Object;
+                                Request  :        AWS.Status.Data;
+                                Response : in out AWS.Response.Data);
+   --  Register a new identity in the authentication database.
+
+   procedure Save
+     (File_Name :    String);
+   --  Save the authentication database in File_Name.
+
+end AWS.OpenID.Authentication_Database;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-encoders.adb Ada-development-Makefile/aws/src/openid/aws-openid-encoders.adb
--- aws.upstream/src/openid/aws-openid-encoders.adb	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-encoders.adb	2013-06-20 12:44:08.000000000 +0000
@@ -0,0 +1,200 @@
+-------------------------------------------------------------------------------
+--  The contents of this file originates from the Stephane Carrez project
+--  Ada Server Faces (util-encoders).
+--
+--  The contents has been altered by AdaHeads K/S. The changes are primarily
+--  stylistic plus removal of code that isn't directly used to complete an
+--  OpenID authentication process. Changes to the actual code (logic) are not
+--  marked specifically. AdaHeads K/S does NOT claim copyright on this file.
+--
+--  The header from the original file is included here for copyright and
+--  license information:
+--
+--  -----------------------------------------------------------------------
+--  --  util-encoders -- Encode/Decode streams and strings from one format to
+--  --  another.
+--  --  Copyright (C) 2009, 2010, 2011 Stephane Carrez
+--  --  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
+--  --
+--  --  Licensed under the Apache License, Version 2.0 (the "License");
+--  --  you may not use this file except in compliance with the License.
+--  --  You may obtain a copy of the License at
+--  --
+--  --      http://www.apache.org/licenses/LICENSE-2.0
+--  --
+--  --  Unless required by applicable law or agreed to in writing, software
+--  --  distributed under the License is distributed on an "AS IS" BASIS,
+--  --  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+--  --  implied.
+--  --  See the License for the specific language governing permissions and
+--  --  limitations under the License.
+--  -----------------------------------------------------------------------
+
+with Ada.Unchecked_Deallocation;
+
+with AWS.OpenID.Encoders.Base16;
+with AWS.OpenID.Encoders.Base64;
+with AWS.OpenID.Encoders.SHA1;
+
+package body AWS.OpenID.Encoders is
+
+   MIN_BUFFER_SIZE : constant Ada.Streams.Stream_Element_Offset := 64;
+   MAX_BUFFER_SIZE : constant Ada.Streams.Stream_Element_Offset := 2_048;
+
+   function Best_Size
+     (Length : Natural)
+      return Ada.Streams.Stream_Element_Offset;
+   --  Compute a good size for allocating a buffer on the stack
+
+   -----------------
+   --  Best_Size  --
+   -----------------
+
+   function Best_Size
+     (Length : Natural)
+      return Ada.Streams.Stream_Element_Offset
+   is
+   begin
+      if Length < Natural (MIN_BUFFER_SIZE) then
+         return MIN_BUFFER_SIZE;
+      elsif Length > Natural (MAX_BUFFER_SIZE) then
+         return MAX_BUFFER_SIZE;
+      else
+         return Ada.Streams.Stream_Element_Offset (((Length + 15) / 16) * 16);
+      end if;
+   end Best_Size;
+
+   --------------
+   --  Create  --
+   --------------
+
+   function Create
+     (Format : Encoding_Format)
+      return Encoder is
+   begin
+      case Format is
+         when Base64_Encoding | Base64_URL_Encoding =>
+            return E : Encoder do
+               E.Encode := new Encoders.Base64.Encoder;
+               E.Decode := new Encoders.Base64.Decoder;
+            end return;
+         when Base16_Encoding | HEX_Encoding =>
+            return E : Encoder do
+               E.Encode := new Encoders.Base16.Encoder;
+               E.Decode := new Encoders.Base16.Decoder;
+            end return;
+         when SHA1_Encoding =>
+            return E : Encoder do
+               E.Encode := new Encoders.SHA1.Encoder;
+               E.Decode := new Encoders.Base64.Decoder;
+            end return;
+      end case;
+   end Create;
+
+   --------------
+   --  Decode  --
+   --------------
+
+   function Decode
+     (E    :    Encoder;
+      Data :    String)
+      return String
+   is
+   begin
+      return E.Decode.Transform (Data);
+   end Decode;
+
+   ----------------
+   --  Finalize  --
+   ----------------
+
+   overriding
+   procedure Finalize
+     (E : in out Encoder)
+   is
+      procedure Free is
+        new Ada.Unchecked_Deallocation (Transformer'Class, Transformer_Access);
+   begin
+      Free (E.Encode);
+      Free (E.Decode);
+   end Finalize;
+
+   -----------------
+   --  Transform  --
+   -----------------
+
+   function Transform
+     (E    :    Transformer'Class;
+      Data :    String)
+      return String
+   is
+      use Ada.Streams;
+      use Ada.Strings.Unbounded;
+
+      Buf_Size : constant Stream_Element_Offset := Best_Size (Data'Length);
+      Buf      : Stream_Element_Array (1 .. Buf_Size);
+      Res      : Stream_Element_Array (1 .. Buf_Size);
+      Result   : Unbounded_String;
+      Pos      : Natural := Data'First;
+      Tmp      : String (1 .. Natural (Buf_Size));
+   begin
+      while Pos <= Data'Last loop
+         declare
+            Last_Encoded  : Stream_Element_Offset;
+            First_Encoded : Stream_Element_Offset := 1;
+            Last          : Stream_Element_Offset;
+            Size          : Stream_Element_Offset;
+            Next_Pos      : Natural;
+         begin
+            --  Fill the stream buffer with our input string
+            Size := Stream_Element_Offset (Data'Last - Pos + 1);
+
+            if Size > Buf'Length then
+               Size := Buf'Length;
+            end if;
+
+            for I in 1 .. Size loop
+               Buf (I) := Character'Pos (Data (Natural (I) + Pos - 1));
+            end loop;
+
+            Next_Pos := Pos + Natural (Size);
+
+            --  Encode that buffer and put the result in out result string.
+            loop
+               E.Transform (Data    => Buf (First_Encoded .. Size),
+                            Into    => Res,
+                            Encoded => Last_Encoded,
+                            Last    => Last);
+
+               --  If the encoder generated nothing, move the position backward
+               --  to take into account the remaining bytes not taken into
+               --  account.
+               if Last < 1 then
+                  Next_Pos := Next_Pos - Natural (Size - First_Encoded + 1);
+                  exit;
+               end if;
+
+               for I in 1 .. Last loop
+                  Tmp (Natural (I)) := Character'Val (Res (I));
+               end loop;
+
+               Append (Result, Tmp (1 .. Natural (Last)));
+
+               exit when Last_Encoded = Size;
+
+               First_Encoded := Last_Encoded + 1;
+            end loop;
+
+            --  The encoder cannot encode the data
+            if Pos = Next_Pos then
+               raise Encoding_Error with "Encoding cannot proceed";
+            end if;
+
+            Pos := Next_Pos;
+         end;
+      end loop;
+
+      return To_String (Result);
+   end Transform;
+
+end AWS.OpenID.Encoders;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-encoders.ads Ada-development-Makefile/aws/src/openid/aws-openid-encoders.ads
--- aws.upstream/src/openid/aws-openid-encoders.ads	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-encoders.ads	2013-06-20 12:44:08.000000000 +0000
@@ -0,0 +1,115 @@
+-------------------------------------------------------------------------------
+--  The contents of this file originates from the Stephane Carrez project
+--  Ada Server Faces (util-encoders).
+--
+--  The contents has been altered by AdaHeads K/S. The changes are primarily
+--  stylistic plus removal of code that isn't directly used to complete an
+--  OpenID authentication process. Changes to the actual code (logic) are not
+--  marked specifically. AdaHeads K/S does NOT claim copyright on this file.
+--
+--  The header from the original file is included here for copyright and
+--  license information:
+--
+--  -----------------------------------------------------------------------
+--  --  util-encoders -- Encode/Decode streams and strings from one format to
+--  --  another.
+--  --  Copyright (C) 2009, 2010, 2011 Stephane Carrez
+--  --  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
+--  --
+--  --  Licensed under the Apache License, Version 2.0 (the "License");
+--  --  you may not use this file except in compliance with the License.
+--  --  You may obtain a copy of the License at
+--  --
+--  --      http://www.apache.org/licenses/LICENSE-2.0
+--  --
+--  --  Unless required by applicable law or agreed to in writing, software
+--  --  distributed under the License is distributed on an "AS IS" BASIS,
+--  --  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+--  --  implied.
+--  --  See the License for the specific language governing permissions and
+--  --  limitations under the License.
+--  -----------------------------------------------------------------------
+
+with Ada.Streams;
+with Ada.Finalization;
+with Ada.Strings.Unbounded;
+
+private package AWS.OpenID.Encoders is
+
+   Encoding_Error : exception;
+
+   type Encoding_Format is (Base64_Encoding,
+                            Base64_URL_Encoding,
+                            Base16_Encoding,
+                            HEX_Encoding,
+                            SHA1_Encoding);
+
+   type Encoder is tagged limited private;
+
+   function Decode
+     (E    :    Encoder;
+      Data :    String)
+      return String;
+   --  Decodes Data using the transformation rules provided by the E encoder.
+   --  Returns the decoded string.
+   --
+   --  Raises Encoding_Error exception if the source string cannot be decoded.
+   --  Raises Not_Supported exception if the decoding is not supported.
+
+   function Create
+     (Format : Encoding_Format)
+      return Encoder;
+   --  Create an Encoder object for the Format encoding.
+
+   type Transformer is limited interface;
+   type Transformer_Access is access all Transformer'Class;
+
+   procedure Transform
+     (E       :        Transformer;
+      Data    :        Ada.Streams.Stream_Element_Array;
+      Into    :    out Ada.Streams.Stream_Element_Array;
+      Last    :    out Ada.Streams.Stream_Element_Offset;
+      Encoded :    out Ada.Streams.Stream_Element_Offset)
+   is abstract;
+   --  Transform the Data input stream into the Into output stream. If the
+   --  transformer does not have enough room to write the result, it must
+   --  return in Encoded the index of the last encoded position in the Data
+   --  stream.
+   --
+   --  Last is the last valid position in the Into output stream.
+   --
+   --  The Encoding_Error exception is raised if the input stream cannot be
+   --  transformed.
+
+   function Transform
+     (E    :    Transformer'Class;
+      Data :    String)
+      return String;
+   --  Transform the Data input string using the transformation rules provided
+   --  by the E transformer.
+   --
+   --  Returns the transformed string.
+   --
+   --  Raises the Encoding_Error exception if the source string cannot be
+   --  transformed
+
+   procedure Transform
+     (E      :    Transformer;
+      Data   :    String;
+      Result : out Ada.Strings.Unbounded.Unbounded_String)
+   is null;
+
+private
+
+   type Encoder is new Ada.Finalization.Limited_Controlled with
+      record
+         Encode : Transformer_Access := null;
+         Decode : Transformer_Access := null;
+      end record;
+
+   overriding
+   procedure Finalize
+     (E : in out Encoder);
+   --  Delete the transformers
+
+end AWS.OpenID.Encoders;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-encoders-base16.adb Ada-development-Makefile/aws/src/openid/aws-openid-encoders-base16.adb
--- aws.upstream/src/openid/aws-openid-encoders-base16.adb	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-encoders-base16.adb	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,209 @@
+-------------------------------------------------------------------------------
+--  The contents of this file originates from the Stephane Carrez project
+--  Ada Server Faces (util-encoders-base16).
+--
+--  The contents has been altered by AdaHeads K/S. The changes are primarily
+--  stylistic plus removal of code that isn't directly used to complete an
+--  OpenID authentication process. Changes to the actual code (logic) are not
+--  marked specifically. AdaHeads K/S does NOT claim copyright on this file.
+--
+--  The header from the original file is included here for copyright and
+--  license information:
+--
+--  -----------------------------------------------------------------------
+--  --  util-encoders-base16 -- Encode/Decode a stream in hexadecimal
+--  --  Copyright (C) 2009, 2010, 2011 Stephane Carrez
+--  --  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
+--  --
+--  --  Licensed under the Apache License, Version 2.0 (the "License");
+--  --  you may not use this file except in compliance with the License.
+--  --  You may obtain a copy of the License at
+--  --
+--  --      http://www.apache.org/licenses/LICENSE-2.0
+--  --
+--  --  Unless required by applicable law or agreed to in writing, software
+--  --  distributed under the License is distributed on an "AS IS" BASIS,
+--  --  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+--  --  implied.
+--  --  See the License for the specific language governing permissions and
+--  --  limitations under the License.
+--  -----------------------------------------------------------------------
+
+package body AWS.OpenID.Encoders.Base16 is
+
+   package body Encoding is
+
+      type Code is mod 2 ** 32;
+      type Conv_Table is array (0 .. 15) of Output_Char;
+
+      Conversion : constant Conv_Table :=
+                     (0 => Output_Char'Val (Character'Pos ('0')),
+                      1 => Output_Char'Val (Character'Pos ('1')),
+                      2 => Output_Char'Val (Character'Pos ('2')),
+                      3 => Output_Char'Val (Character'Pos ('3')),
+                      4 => Output_Char'Val (Character'Pos ('4')),
+                      5 => Output_Char'Val (Character'Pos ('5')),
+                      6 => Output_Char'Val (Character'Pos ('6')),
+                      7 => Output_Char'Val (Character'Pos ('7')),
+                      8 => Output_Char'Val (Character'Pos ('8')),
+                      9 => Output_Char'Val (Character'Pos ('9')),
+                      10 => Output_Char'Val (Character'Pos ('A')),
+                      11 => Output_Char'Val (Character'Pos ('B')),
+                      12 => Output_Char'Val (Character'Pos ('C')),
+                      13 => Output_Char'Val (Character'Pos ('D')),
+                      14 => Output_Char'Val (Character'Pos ('E')),
+                      15 => Output_Char'Val (Character'Pos ('F')));
+
+      function To_Output_Char
+        (Ch : Input_Char)
+         return Code;
+
+      --------------
+      --  Decode  --
+      --------------
+
+      procedure Decode
+        (From    :        Input;
+         Into    : in out Output;
+         Last    :    out Output_Index;
+         Encoded :    out Index)
+      is
+         First : Boolean := True;
+         Pos   : Output_Index := Into'First;
+         Value : Code := 0;
+      begin
+         if Into'Length < From'Length / 2 then
+            Encoded := Into'Length * 2;
+         elsif From'Last mod 2 /= 0 then
+            Encoded := From'Last - 1;
+         else
+            Encoded := From'Last;
+         end if;
+
+         if Encoded < From'First then
+            raise Encoding_Error with "Hexadecimal stream is too short";
+         end if;
+
+         for I in From'First .. Encoded loop
+            if First then
+               Value := To_Output_Char (From (I));
+               First := False;
+            else
+               Value := Value * 16 + To_Output_Char (From (I));
+               Into (Pos) := Output_Char'Val (Value);
+               Pos := Pos + 1;
+               First := True;
+            end if;
+         end loop;
+
+         Last := Pos - 1;
+      end Decode;
+
+      --------------
+      --  Encode  --
+      --------------
+
+      procedure Encode
+        (From    :        Input;
+         Into    : in out Output;
+         Last    :    out Output_Index;
+         Encoded :    out Index)
+      is
+         N   : constant Output_Index := (Input_Char'Size / 8) * 2;
+         Pos : Output_Index := Into'First;
+      begin
+         for I in From'Range loop
+            if Pos + N > Into'Last + 1 then
+               Last := Pos - 1;
+               Encoded := I - 1;
+               return;
+            end if;
+
+            declare
+               Value : Code := Input_Char'Pos (From (I));
+               P     : Code;
+            begin
+               Pos := Pos + N;
+               for J in 1 .. N / 2 loop
+                  P := Value;
+                  Value := Value / 16;
+                  Into (Pos - J) := Conversion (Natural (P and 16#0F#));
+
+                  P := Value;
+                  Into (Pos - J - 1) := Conversion (Natural (P and 16#0F#));
+                  Value := Value / 16;
+               end loop;
+            end;
+         end loop;
+
+         Last := Pos - 1;
+         Encoded := From'Last;
+      end Encode;
+
+      ----------------------
+      --  To_Output_Char  --
+      ----------------------
+
+      function To_Output_Char
+        (Ch : Input_Char)
+         return Code
+      is
+         C : constant Code := Input_Char'Pos (Ch);
+      begin
+         if C in Character'Pos ('a') .. Character'Pos ('f') then
+            return C - Character'Pos ('a') + 10;
+         elsif C in Character'Pos ('A') .. Character'Pos ('F') then
+            return C - Character'Pos ('A') + 10;
+         elsif C in Character'Pos ('0') .. Character'Pos ('9') then
+            return C - Character'Pos ('0');
+         else
+            raise Encoding_Error with "Invalid character: " &
+              Character'Val (C);
+         end if;
+      end To_Output_Char;
+
+   end Encoding;
+
+   package Encoding_Stream is new Encoding
+     (Output       => Ada.Streams.Stream_Element_Array,
+      Index        => Ada.Streams.Stream_Element_Offset,
+      Output_Index => Ada.Streams.Stream_Element_Offset,
+      Input_Char   => Ada.Streams.Stream_Element,
+      Output_Char  => Ada.Streams.Stream_Element,
+      Input        => Ada.Streams.Stream_Element_Array);
+
+   -----------------
+   --  Transform  --
+   -----------------
+
+   overriding
+   procedure Transform
+     (E       :        Decoder;
+      Data    :        Ada.Streams.Stream_Element_Array;
+      Into    :    out Ada.Streams.Stream_Element_Array;
+      Last    :    out Ada.Streams.Stream_Element_Offset;
+      Encoded :    out Ada.Streams.Stream_Element_Offset)
+   is
+      pragma Unreferenced (E);
+   begin
+      Encoding_Stream.Decode (Data, Into, Last, Encoded);
+   end Transform;
+
+   -----------------
+   --  Transform  --
+   -----------------
+
+   overriding
+   procedure Transform
+     (E       :        Encoder;
+      Data    :        Ada.Streams.Stream_Element_Array;
+      Into    :    out Ada.Streams.Stream_Element_Array;
+      Last    :    out Ada.Streams.Stream_Element_Offset;
+      Encoded :    out Ada.Streams.Stream_Element_Offset)
+   is
+      pragma Unreferenced (E);
+   begin
+      Encoding_Stream.Encode (Data, Into, Last, Encoded);
+   end Transform;
+
+end AWS.OpenID.Encoders.Base16;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-encoders-base16.ads Ada-development-Makefile/aws/src/openid/aws-openid-encoders-base16.ads
--- aws.upstream/src/openid/aws-openid-encoders-base16.ads	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-encoders-base16.ads	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,105 @@
+-------------------------------------------------------------------------------
+--  The contents of this file originates from the Stephane Carrez project
+--  Ada Server Faces (util-encoders-base16).
+--
+--  The contents has been altered by AdaHeads K/S. The changes are primarily
+--  stylistic plus removal of code that isn't directly used to complete an
+--  OpenID authentication process. Changes to the actual code (logic) are not
+--  marked specifically. AdaHeads K/S does NOT claim copyright on this file.
+--
+--  The header from the original file is included here for copyright and
+--  license information:
+--
+--  ---------------------------------------------------------------------------
+--  --  util-encoders-base16 -- Encode/Decode a stream in hexadecimal
+--  --  Copyright (C) 2009, 2010, 2011 Stephane Carrez
+--  --  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
+--  --
+--  --  Licensed under the Apache License, Version 2.0 (the "License");
+--  --  you may not use this file except in compliance with the License.
+--  --  You may obtain a copy of the License at
+--  --
+--  --      http://www.apache.org/licenses/LICENSE-2.0
+--  --
+--  --  Unless required by applicable law or agreed to in writing, software
+--  --  distributed under the License is distributed on an "AS IS" BASIS,
+--  --  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+--  --  implied.
+--  --  See the License for the specific language governing permissions and
+--  --  limitations under the License.
+--  ---------------------------------------------------------------------------
+
+with Ada.Streams;
+
+package AWS.OpenID.Encoders.Base16 is
+
+   type Decoder is new Encoders.Transformer with private;
+   type Encoder is new Encoders.Transformer with private;
+
+   overriding
+   procedure Transform
+     (E       :        Decoder;
+      Data    :        Ada.Streams.Stream_Element_Array;
+      Into    :    out Ada.Streams.Stream_Element_Array;
+      Last    :    out Ada.Streams.Stream_Element_Offset;
+      Encoded :    out Ada.Streams.Stream_Element_Offset);
+   --  Decodes the Data base16 input stream into the Into binary output stream.
+   --
+   --  If the transformer does not have enough room to write the result, it
+   --  must return in Encoded the index of the last encoded position in the
+   --  Data stream.
+   --
+   --  Last is the last valid position in the Into output stream.
+   --
+   --  The Encoding_Error exception is raised if the input stream cannot be
+   --  transformed.
+
+   overriding
+   procedure Transform
+     (E       :        Encoder;
+      Data    :        Ada.Streams.Stream_Element_Array;
+      Into    :    out Ada.Streams.Stream_Element_Array;
+      Last    :    out Ada.Streams.Stream_Element_Offset;
+      Encoded :    out Ada.Streams.Stream_Element_Offset);
+   --  Encodes the Data base16 input stream into the Into binary output stream.
+   --
+   --  If the transformer does not have enough room to write the result, it
+   --  must return in Encoded the index of the last encoded position in the
+   --  Data stream.
+   --
+   --  Last is the last valid position in the Into output stream.
+   --
+   --  The Encoding_Error exception is raised if the input stream cannot be
+   --  transformed.
+
+private
+
+   type Decoder is new Encoders.Transformer with null record;
+   type Encoder is new Encoders.Transformer with null record;
+
+   generic
+
+      type Input_Char is (<>);
+      type Output_Char is (<>);
+      type Index is range <>;
+      type Output_Index is range <>;
+      type Input is array (Index range <>) of Input_Char;
+      type Output is array (Output_Index range <>) of Output_Char;
+
+   package Encoding is
+
+      procedure Encode
+        (From    :        Input;
+         Into    : in out Output;
+         Last    :    out Output_Index;
+         Encoded :    out Index);
+
+      procedure Decode
+        (From    :        Input;
+         Into    : in out Output;
+         Last    :    out Output_Index;
+         Encoded :    out Index);
+
+   end Encoding;
+
+end AWS.OpenID.Encoders.Base16;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-encoders-base64.adb Ada-development-Makefile/aws/src/openid/aws-openid-encoders-base64.adb
--- aws.upstream/src/openid/aws-openid-encoders-base64.adb	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-encoders-base64.adb	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,194 @@
+-------------------------------------------------------------------------------
+--  The contents of this file originates from the Stephane Carrez project
+--  Ada Server Faces (util-encoders-base64).
+--
+--  The contents has been altered by AdaHeads K/S. The changes are primarily
+--  stylistic plus removal of code that isn't directly used to complete an
+--  OpenID authentication process. Changes to the actual code (logic) are not
+--  marked specifically. AdaHeads K/S does NOT claim copyright on this file.
+--
+--  The header from the original file is included here for copyright and
+--  license information:
+--
+--  -----------------------------------------------------------------------
+--  --  util-encoders-base64 -- Encode/Decode a stream in base64adecimal
+--  --  Copyright (C) 2009, 2010, 2011 Stephane Carrez
+--  --  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
+--  --
+--  --  Licensed under the Apache License, Version 2.0 (the "License");
+--  --  you may not use this file except in compliance with the License.
+--  --  You may obtain a copy of the License at
+--  --
+--  --      http://www.apache.org/licenses/LICENSE-2.0
+--  --
+--  --  Unless required by applicable law or agreed to in writing, software
+--  --  distributed under the License is distributed on an "AS IS" BASIS,
+--  --  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+--  --  implied.
+--  --  See the License for the specific language governing permissions and
+--  --  limitations under the License.
+--  -----------------------------------------------------------------------
+
+package body AWS.OpenID.Encoders.Base64 is
+
+   -----------------
+   --  Transform  --
+   -----------------
+
+   overriding
+   procedure Transform
+     (E       :        Decoder;
+      Data    :        Ada.Streams.Stream_Element_Array;
+      Into    :    out Ada.Streams.Stream_Element_Array;
+      Last    :    out Ada.Streams.Stream_Element_Offset;
+      Encoded :    out Ada.Streams.Stream_Element_Offset)
+   is
+      use Ada.Streams;
+      use Interfaces;
+
+      C1     : Stream_Element;
+      C2     : Stream_Element;
+      I      : Stream_Element_Offset := Data'First;
+      Pos    : Stream_Element_Offset := Into'First;
+      Size   : constant Stream_Element_Offset := Data'Length / 4;
+      Val1   : Unsigned_8;
+      Val2   : Unsigned_8;
+      Values : constant Alphabet_Values_Access := E.Values;
+   begin
+      if Data'Length /= Size * 4 then
+         raise Encoding_Error with "Invalid input stream length";
+      end if;
+
+      while I <= Data'Last loop
+         if Pos + 3 > Into'Last + 1 then
+            Last := Pos - 1;
+            Encoded := I - 1;
+            return;
+         end if;
+
+         --  Decode the first two bytes to produce the first output byte
+         C1 := Data (I);
+         Val1 := Values (C1);
+         if (Val1 and 16#C0#) /= 0 then
+            raise Encoding_Error with
+              "Invalid character '" & Character'Val (C1) & "'";
+         end if;
+
+         C2 := Data (I + 1);
+         Val2 := Values (C2);
+         if (Val2 and 16#C0#) /= 0 then
+            raise Encoding_Error with
+              "Invalid character '" & Character'Val (C2) & "'";
+         end if;
+
+         Into (Pos) :=
+           Stream_Element (Shift_Left (Val1, 2) or Shift_Right (Val2, 4));
+
+         --  Decode the next byte
+         C1 := Data (I + 2);
+         Val1 := Values (C1);
+         if (Val1 and 16#C0#) /= 0 then
+            if C1 /= Character'Pos ('=') then
+               raise Encoding_Error with
+                 "Invalid character '" & Character'Val (C1) & "'";
+            end if;
+            Encoded := I + 3;
+            Last := Pos;
+            return;
+         end if;
+
+         Into (Pos + 1) :=
+           Stream_Element (Shift_Left (Val2, 4) or Shift_Right (Val1, 2));
+
+         C2 := Data (I + 3);
+         Val2 := Values (C2);
+         if (Val2 and 16#C0#) /= 0 then
+            if C2 /= Character'Pos ('=') then
+               raise Encoding_Error with
+                 "Invalid character '" & Character'Val (C1) & "'";
+            end if;
+            Encoded := I + 3;
+            Last := Pos + 1;
+            return;
+         end if;
+
+         Into (Pos + 2) := Stream_Element (Shift_Left (Val1, 6) or Val2);
+         Pos := Pos + 3;
+         I := I + 4;
+      end loop;
+
+      Last := Pos - 1;
+      Encoded := Data'Last;
+   end Transform;
+
+   -----------------
+   --  Transform  --
+   -----------------
+
+   overriding
+   procedure Transform
+     (E       :        Encoder;
+      Data    :        Ada.Streams.Stream_Element_Array;
+      Into    :    out Ada.Streams.Stream_Element_Array;
+      Last    :    out Ada.Streams.Stream_Element_Offset;
+      Encoded :    out Ada.Streams.Stream_Element_Offset)
+   is
+      use Ada.Streams;
+      use Interfaces;
+
+      Alphabet : constant Alphabet_Access := E.Alphabet;
+      C1       : Unsigned_8;
+      C2       : Unsigned_8;
+      I        : Stream_Element_Offset := Data'First;
+      Pos      : Stream_Element_Offset := Into'First;
+   begin
+      while I <= Data'Last loop
+         if Pos + 4 > Into'Last + 1 then
+            Last := Pos - 1;
+            Encoded := I - 1;
+
+            return;
+         end if;
+
+         --  Encode the first byte, add padding if necessary.
+         C1 := Unsigned_8 (Data (I));
+         Into (Pos) := Alphabet (Shift_Right (C1, 2));
+
+         if I = Data'Last then
+            Into (Pos + 1) := Alphabet (Shift_Left (C1 and 3, 4));
+            Into (Pos + 2) := Character'Pos ('=');
+            Into (Pos + 3) := Character'Pos ('=');
+            Last := Pos + 3;
+            Encoded := Data'Last;
+
+            return;
+         end if;
+
+         --  Encode the second byte, add padding if necessary.
+         C2 := Unsigned_8 (Data (I + 1));
+         Into (Pos + 1) :=
+           Alphabet (Shift_Left (C1 and 16#03#, 4) or Shift_Right (C2, 4));
+
+         if I = Data'Last - 1 then
+            Into (Pos + 2) := Alphabet (Shift_Left (C2 and 16#0F#, 2));
+            Into (Pos + 3) := Character'Pos ('=');
+            Last := Pos + 3;
+            Encoded := Data'Last;
+
+            return;
+         end if;
+
+         --  Encode the third byte
+         C1 := Unsigned_8 (Data (I + 2));
+         Into (Pos + 2) :=
+           Alphabet (Shift_Left (C2 and 16#0F#, 2) or Shift_Right (C1, 6));
+         Into (Pos + 3) := Alphabet (C1 and 16#03F#);
+         Pos := Pos + 4;
+         I := I + 3;
+      end loop;
+
+      Last := Pos - 1;
+      Encoded := Data'Last;
+   end Transform;
+
+end AWS.OpenID.Encoders.Base64;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-encoders-base64.ads Ada-development-Makefile/aws/src/openid/aws-openid-encoders-base64.ads
--- aws.upstream/src/openid/aws-openid-encoders-base64.ads	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-encoders-base64.ads	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,157 @@
+-------------------------------------------------------------------------------
+--  The contents of this file originates from the Stephane Carrez project
+--  Ada Server Faces (util-encoders-base64).
+--
+--  The contents has been altered by AdaHeads K/S. The changes are primarily
+--  stylistic plus removal of code that isn't directly used to complete an
+--  OpenID authentication process. Changes to the actual code (logic) are not
+--  marked specifically. AdaHeads K/S does NOT claim copyright on this file.
+--
+--  The header from the original file is included here for copyright and
+--  license information:
+--
+--  -----------------------------------------------------------------------
+--  --  util-encoders-base64 -- Encode/Decode a stream in Base64
+--  --  Copyright (C) 2009, 2010, 2011 Stephane Carrez
+--  --  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
+--  --
+--  --  Licensed under the Apache License, Version 2.0 (the "License");
+--  --  you may not use this file except in compliance with the License.
+--  --  You may obtain a copy of the License at
+--  --
+--  --      http://www.apache.org/licenses/LICENSE-2.0
+--  --
+--  --  Unless required by applicable law or agreed to in writing, software
+--  --  distributed under the License is distributed on an "AS IS" BASIS,
+--  --  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+--  --  implied.
+--  --  See the License for the specific language governing permissions and
+--  --  limitations under the License.
+--  -----------------------------------------------------------------------
+
+with Ada.Streams;
+with Interfaces;
+
+package AWS.OpenID.Encoders.Base64 is
+
+   type Decoder is new Encoders.Transformer with private;
+   type Encoder is new Encoders.Transformer with private;
+
+   overriding
+   procedure Transform
+     (E       :        Decoder;
+      Data    :        Ada.Streams.Stream_Element_Array;
+      Into    :    out Ada.Streams.Stream_Element_Array;
+      Last    :    out Ada.Streams.Stream_Element_Offset;
+      Encoded :    out Ada.Streams.Stream_Element_Offset);
+   --  Decodes the Data base64 input stream into the Into binary output stream.
+   --
+   --  If the transformer does not have enough room to write the result, it
+   --  must return in Encoded the index of the last encoded position in the
+   --  Data stream.
+   --
+   --  Last is the last valid position in the Into output stream.
+   --
+   --  The Encoding_Error exception is raised if the input stream cannot be
+   --  transformed.
+
+   overriding
+   procedure Transform
+     (E       :        Encoder;
+      Data    :        Ada.Streams.Stream_Element_Array;
+      Into    :    out Ada.Streams.Stream_Element_Array;
+      Last    :    out Ada.Streams.Stream_Element_Offset;
+      Encoded :    out Ada.Streams.Stream_Element_Offset);
+   --  Encodes the Data base64 input stream into the Into binary output stream.
+   --
+   --  If the transformer does not have enough room to write the result, it
+   --  must return in Encoded the index of the last encoded position in the
+   --  Data stream.
+   --
+   --  Last is the last valid position in the Into output stream.
+   --
+   --  The Encoding_Error exception is raised if the input stream cannot be
+   --  transformed.
+
+private
+
+   type Alphabet is
+     array (Interfaces.Unsigned_8 range 0 .. 63) of Ada.Streams.Stream_Element;
+
+   type Alphabet_Access is not null access constant Alphabet;
+
+   type Alphabet_Values is array (Ada.Streams.Stream_Element) of
+     Interfaces.Unsigned_8;
+
+   type Alphabet_Values_Access is not null access constant Alphabet_Values;
+
+   BASE64_ALPHABET : aliased constant Alphabet
+     := (Character'Pos ('A'), Character'Pos ('B'), Character'Pos ('C'),
+       Character'Pos ('D'), Character'Pos ('E'), Character'Pos ('F'),
+       Character'Pos ('G'), Character'Pos ('H'), Character'Pos ('I'),
+       Character'Pos ('J'), Character'Pos ('K'), Character'Pos ('L'),
+       Character'Pos ('M'), Character'Pos ('N'), Character'Pos ('O'),
+       Character'Pos ('P'), Character'Pos ('Q'), Character'Pos ('R'),
+       Character'Pos ('S'), Character'Pos ('T'), Character'Pos ('U'),
+       Character'Pos ('V'), Character'Pos ('W'), Character'Pos ('X'),
+       Character'Pos ('Y'), Character'Pos ('Z'), Character'Pos ('a'),
+       Character'Pos ('b'), Character'Pos ('c'), Character'Pos ('d'),
+       Character'Pos ('e'), Character'Pos ('f'), Character'Pos ('g'),
+       Character'Pos ('h'), Character'Pos ('i'), Character'Pos ('j'),
+       Character'Pos ('k'), Character'Pos ('l'), Character'Pos ('m'),
+       Character'Pos ('n'), Character'Pos ('o'), Character'Pos ('p'),
+       Character'Pos ('q'), Character'Pos ('r'), Character'Pos ('s'),
+       Character'Pos ('t'), Character'Pos ('u'), Character'Pos ('v'),
+       Character'Pos ('w'), Character'Pos ('x'), Character'Pos ('y'),
+       Character'Pos ('z'), Character'Pos ('0'), Character'Pos ('1'),
+       Character'Pos ('2'), Character'Pos ('3'), Character'Pos ('4'),
+       Character'Pos ('5'), Character'Pos ('6'), Character'Pos ('7'),
+       Character'Pos ('8'), Character'Pos ('9'), Character'Pos ('+'),
+       Character'Pos ('/'));
+
+   BASE64_VALUES : aliased constant Alphabet_Values
+     := (Character'Pos ('A') => 0,  Character'Pos ('B') => 1,
+       Character'Pos ('C') => 2,  Character'Pos ('D') => 3,
+       Character'Pos ('E') => 4,  Character'Pos ('F') => 5,
+       Character'Pos ('G') => 6,  Character'Pos ('H') => 7,
+       Character'Pos ('I') => 8,  Character'Pos ('J') => 9,
+       Character'Pos ('K') => 10, Character'Pos ('L') => 11,
+       Character'Pos ('M') => 12, Character'Pos ('N') => 13,
+       Character'Pos ('O') => 14, Character'Pos ('P') => 15,
+       Character'Pos ('Q') => 16, Character'Pos ('R') => 17,
+       Character'Pos ('S') => 18, Character'Pos ('T') => 19,
+       Character'Pos ('U') => 20, Character'Pos ('V') => 21,
+       Character'Pos ('W') => 22, Character'Pos ('X') => 23,
+       Character'Pos ('Y') => 24, Character'Pos ('Z') => 25,
+       Character'Pos ('a') => 26, Character'Pos ('b') => 27,
+       Character'Pos ('c') => 28, Character'Pos ('d') => 29,
+       Character'Pos ('e') => 30, Character'Pos ('f') => 31,
+       Character'Pos ('g') => 32, Character'Pos ('h') => 33,
+       Character'Pos ('i') => 34, Character'Pos ('j') => 35,
+       Character'Pos ('k') => 36, Character'Pos ('l') => 37,
+       Character'Pos ('m') => 38, Character'Pos ('n') => 39,
+       Character'Pos ('o') => 40, Character'Pos ('p') => 41,
+       Character'Pos ('q') => 42, Character'Pos ('r') => 43,
+       Character'Pos ('s') => 44, Character'Pos ('t') => 45,
+       Character'Pos ('u') => 46, Character'Pos ('v') => 47,
+       Character'Pos ('w') => 48, Character'Pos ('x') => 49,
+       Character'Pos ('y') => 50, Character'Pos ('z') => 51,
+       Character'Pos ('0') => 52, Character'Pos ('1') => 53,
+       Character'Pos ('2') => 54, Character'Pos ('3') => 55,
+       Character'Pos ('4') => 56, Character'Pos ('5') => 57,
+       Character'Pos ('6') => 58, Character'Pos ('7') => 59,
+       Character'Pos ('8') => 60, Character'Pos ('9') => 61,
+       Character'Pos ('+') => 62, Character'Pos ('/') => 63,
+       others => 16#FF#);
+
+   type Decoder is new Encoders.Transformer with
+      record
+         Values : Alphabet_Values_Access := BASE64_VALUES'Access;
+      end record;
+
+   type Encoder is new Encoders.Transformer with
+      record
+         Alphabet : Alphabet_Access := BASE64_ALPHABET'Access;
+      end record;
+
+end AWS.OpenID.Encoders.Base64;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-encoders-hmac.ads Ada-development-Makefile/aws/src/openid/aws-openid-encoders-hmac.ads
--- aws.upstream/src/openid/aws-openid-encoders-hmac.ads	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-encoders-hmac.ads	2013-06-20 12:44:08.000000000 +0000
@@ -0,0 +1,32 @@
+-------------------------------------------------------------------------------
+--  The contents of this file originates from the Stephane Carrez project
+--  Ada Server Faces (util-encoders-hmac).
+--
+--  The contents has been altered by AdaHeads K/S. The changes are primarily
+--  stylistic plus removal of code that isn't directly used to complete an
+--  OpenID authentication process. Changes to the actual code (logic) are not
+--  marked specifically. AdaHeads K/S does NOT claim copyright on this file.
+--
+--  The header from the original file is included here for copyright and
+--  license information:
+--
+--  ----------------------------------------------------------------------
+--  --  util-encoders-hmac -- Hashed message authentication code
+--  --  Copyright (C) 2011 Stephane Carrez
+--  --  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
+--  --
+--  --  Licensed under the Apache License, Version 2.0 (the "License");
+--  --  you may not use this file except in compliance with the License.
+--  --  You may obtain a copy of the License at
+--  --
+--  --      http://www.apache.org/licenses/LICENSE-2.0
+--  --
+--  --  Unless required by applicable law or agreed to in writing, software
+--  --  distributed under the License is distributed on an "AS IS" BASIS,
+--  --  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+--  --  See the License for the specific language governing permissions and
+--  --  limitations under the License.
+--  -----------------------------------------------------------------------
+
+package AWS.OpenID.Encoders.HMAC is
+end AWS.OpenID.Encoders.HMAC;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-encoders-hmac-sha1.adb Ada-development-Makefile/aws/src/openid/aws-openid-encoders-hmac-sha1.adb
--- aws.upstream/src/openid/aws-openid-encoders-hmac-sha1.adb	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-encoders-hmac-sha1.adb	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,230 @@
+-------------------------------------------------------------------------------
+--  The contents of this file originates from the Stephane Carrez project
+--  Ada Server Faces (util-encoders-hmac-sha1).
+--
+--  The contents has been altered by AdaHeads K/S. The changes are primarily
+--  stylistic plus removal of code that isn't directly used to complete an
+--  OpenID authentication process. Changes to the actual code (logic) are not
+--  marked specifically. AdaHeads K/S does NOT claim copyright on this file.
+--
+--  The header from the original file is included here for copyright and
+--  license information:
+--
+--  -----------------------------------------------------------------------
+--  --  util-encoders-hmac-sha1 -- Compute HMAC-SHA1 authentication code
+--  --  Copyright (C) 2011 Stephane Carrez
+--  --  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
+--  --
+--  --  Licensed under the Apache License, Version 2.0 (the "License");
+--  --  you may not use this file except in compliance with the License.
+--  --  You may obtain a copy of the License at
+--  --
+--  --      http://www.apache.org/licenses/LICENSE-2.0
+--  --
+--  --  Unless required by applicable law or agreed to in writing, software
+--  --  distributed under the License is distributed on an "AS IS" BASIS,
+--  --  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+--  --  implied.
+--  --  See the License for the specific language governing permissions and
+--  --  limitations under the License.
+--  -----------------------------------------------------------------------
+
+with AWS.OpenID.Encoders.Base16;
+with AWS.OpenID.Encoders.Base64;
+
+package body AWS.OpenID.Encoders.HMAC.SHA1 is
+
+   IPAD : constant Ada.Streams.Stream_Element := 16#36#;
+   OPAD : constant Ada.Streams.Stream_Element := 16#5c#;
+
+   --------------
+   --  Finish  --
+   --------------
+
+   procedure Finish
+     (E    : in out Context;
+      Hash :    out Encoders.SHA1.Hash_Array)
+   is
+      use type Ada.Streams.Stream_Element;
+      use type Ada.Streams.Stream_Element_Offset;
+   begin
+      Encoders.SHA1.Finish (E.SHA, Hash);
+
+      --  Hash the key in the SHA1 context.
+      declare
+         Block : Ada.Streams.Stream_Element_Array (0 .. 63);
+      begin
+         for I in 0 .. E.Key_Len loop
+            Block (I) := OPAD xor E.Key (I);
+         end loop;
+
+         if E.Key_Len < 63 then
+            for I in E.Key_Len + 1 .. 63 loop
+               Block (I) := OPAD;
+            end loop;
+         end if;
+
+         Encoders.SHA1.Update (E.SHA, Block);
+      end;
+
+      Encoders.SHA1.Update (E.SHA, Hash);
+      Encoders.SHA1.Finish (E.SHA, Hash);
+   end Finish;
+
+   --------------
+   --  Finish  --
+   --------------
+
+   procedure Finish
+     (E    : in out Context;
+      Hash :    out Encoders.SHA1.Digest)
+   is
+      Buf : Ada.Streams.Stream_Element_Array (1 .. Hash'Length);
+      for Buf'Address use Hash'Address;
+      pragma Import (Ada, Buf);
+
+      B       : Encoders.Base16.Encoder;
+      Encoded : Ada.Streams.Stream_Element_Offset;
+      H       : Encoders.SHA1.Hash_Array;
+      Last    : Ada.Streams.Stream_Element_Offset;
+   begin
+      Finish (E, H);
+      B.Transform (Data => H, Into => Buf, Last => Last, Encoded => Encoded);
+   end Finish;
+
+   ---------------------
+   --  Finish_Base64  --
+   ---------------------
+
+   procedure Finish_Base64
+     (E    : in out Context;
+      Hash :    out Encoders.SHA1.Base64_Digest)
+   is
+      Buf : Ada.Streams.Stream_Element_Array (1 .. Hash'Length);
+      for Buf'Address use Hash'Address;
+      pragma Import (Ada, Buf);
+
+      B       : Encoders.Base64.Encoder;
+      Encoded : Ada.Streams.Stream_Element_Offset;
+      H       : Encoders.SHA1.Hash_Array;
+      Last    : Ada.Streams.Stream_Element_Offset;
+   begin
+      Finish (E, H);
+      B.Transform (Data => H, Into => Buf, Last => Last, Encoded => Encoded);
+   end Finish_Base64;
+
+   ---------------
+   --  Set_Key  --
+   ---------------
+
+   procedure Set_Key
+     (E   : in out Context;
+      Key :        String)
+   is
+      Buf : Ada.Streams.Stream_Element_Array (1 .. Key'Length);
+      for Buf'Address use Key'Address;
+      pragma Import (Ada, Buf);
+   begin
+      Set_Key (E, Buf);
+   end Set_Key;
+
+   ---------------
+   --  Set_Key  --
+   ---------------
+
+   procedure Set_Key
+     (E   : in out Context;
+      Key :        Ada.Streams.Stream_Element_Array)
+   is
+      use type Ada.Streams.Stream_Element_Offset;
+      use type Ada.Streams.Stream_Element;
+   begin
+      --  Reduce the key
+      if Key'Length > 64 then
+         AWS.OpenID.Encoders.SHA1.Update (E.SHA, Key);
+         AWS.OpenID.Encoders.SHA1.Finish (E.SHA, E.Key (0 .. 19));
+         E.Key_Len := 19;
+      else
+         E.Key_Len := Key'Length - 1;
+         E.Key (0 .. E.Key_Len) := Key;
+      end if;
+
+      --  Hash the key in the SHA1 context.
+      declare
+         Block : Ada.Streams.Stream_Element_Array (0 .. 63);
+      begin
+         for I in 0 .. E.Key_Len loop
+            Block (I) := IPAD xor E.Key (I);
+         end loop;
+
+         for I in E.Key_Len + 1 .. 63 loop
+            Block (I) := IPAD;
+         end loop;
+
+         AWS.OpenID.Encoders.SHA1.Update (E.SHA, Block);
+      end;
+   end Set_Key;
+
+   ------------
+   --  Sign  --
+   ------------
+
+   function Sign
+     (Key  :    String;
+      Data :    String)
+      return Encoders.SHA1.Digest
+   is
+      Ctx    : Context;
+      Result : Encoders.SHA1.Digest;
+   begin
+      Set_Key (Ctx, Key);
+      Update (Ctx, Data);
+      Finish (Ctx, Result);
+
+      return Result;
+   end Sign;
+
+   -------------------
+   --  Sign_Base64  --
+   -------------------
+
+   function Sign_Base64
+     (Key  :    String;
+      Data :    String)
+      return Encoders.SHA1.Base64_Digest
+   is
+      Ctx    : Context;
+      Result : Encoders.SHA1.Base64_Digest;
+   begin
+      Set_Key (Ctx, Key);
+      Update (Ctx, Data);
+      Finish_Base64 (Ctx, Result);
+
+      return Result;
+   end Sign_Base64;
+
+   --------------
+   --  Update  --
+   --------------
+
+   procedure Update
+     (E : in out Context;
+      S :        String)
+   is
+   begin
+      Encoders.SHA1.Update (E.SHA, S);
+   end Update;
+
+   --------------
+   --  Update  --
+   --------------
+
+   procedure Update
+     (E : in out Context;
+      S :        Ada.Streams.Stream_Element_Array)
+   is
+   begin
+      Encoders.SHA1.Update (E.SHA, S);
+   end Update;
+
+end AWS.OpenID.Encoders.HMAC.SHA1;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-encoders-hmac-sha1.ads Ada-development-Makefile/aws/src/openid/aws-openid-encoders-hmac-sha1.ads
--- aws.upstream/src/openid/aws-openid-encoders-hmac-sha1.ads	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-encoders-hmac-sha1.ads	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,109 @@
+-------------------------------------------------------------------------------
+--  The contents of this file originates from the Stephane Carrez project
+--  Ada Server Faces (util-encoders-hmac-sha1).
+--
+--  The contents has been altered by AdaHeads K/S. The changes are primarily
+--  stylistic plus removal of code that isn't directly used to complete an
+--  OpenID authentication process. Changes to the actual code (logic) are not
+--  marked specifically. AdaHeads K/S does NOT claim copyright on this file.
+--
+--  The header from the original file is included here for copyright and
+--  license information:
+--
+--  -----------------------------------------------------------------------
+--  --  util-encoders-hmac-sha1 -- Compute HMAC-SHA1 authentication code
+--  --  Copyright (C) 2011 Stephane Carrez
+--  --  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
+--  --
+--  --  Licensed under the Apache License, Version 2.0 (the "License");
+--  --  you may not use this file except in compliance with the License.
+--  --  You may obtain a copy of the License at
+--  --
+--  --      http://www.apache.org/licenses/LICENSE-2.0
+--  --
+--  --  Unless required by applicable law or agreed to in writing, software
+--  --  distributed under the License is distributed on an "AS IS" BASIS,
+--  --  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+--  --  implied.
+--  --  See the License for the specific language governing permissions and
+--  --  limitations under the License.
+--  -----------------------------------------------------------------------
+
+with Ada.Finalization;
+with Ada.Streams;
+
+with AWS.OpenID.Encoders.SHA1;
+
+package AWS.OpenID.Encoders.HMAC.SHA1 is
+
+   type Context is limited private;
+
+   procedure Finish
+     (E    : in out Context;
+      Hash :    out Encoders.SHA1.Hash_Array);
+   --  Computes the HMAC-SHA1 with the private key and the data collected by
+   --  the Update procedures. Returns the raw binary hash in Hash.
+
+   procedure Finish
+     (E    : in out Context;
+      Hash :    out Encoders.SHA1.Digest);
+   --  Computes the HMAC-SHA1 with the private key and the data collected by
+   --  the Update procedures. Returns the hexadecimal hash in Hash.
+
+   procedure Finish_Base64
+     (E    : in out Context;
+      Hash :    out Encoders.SHA1.Base64_Digest);
+   --  Computes the HMAC-SHA1 with the private key and the data collected by
+   --  the Update procedures. Returns the base64 hash in Hash.
+
+   procedure Set_Key
+     (E   : in out Context;
+      Key :        String);
+   --  Set the hmac private key. The key must be set before calling any
+   --  Update procedure.
+
+   procedure Set_Key
+     (E   : in out Context;
+      Key :        Ada.Streams.Stream_Element_Array);
+   --  Set the hmac private key. The key must be set before calling any
+   --  Update procedure.
+
+   function Sign
+     (Key  :    String;
+      Data :    String)
+      return Encoders.SHA1.Digest;
+   --  Sign the data string with the key and return the HMAC-SHA1 code as
+   --  hexadecimal string.
+
+   function Sign_Base64
+     (Key  :    String;
+      Data :    String)
+      return Encoders.SHA1.Base64_Digest;
+   --  Sign the data string with the key and return the HMAC-SHA1 code as
+   --  base64 string.
+
+   procedure Update
+     (E : in out Context;
+      S :        String);
+   --  Update the hash with the string.
+
+   procedure Update
+     (E : in out Context;
+      S :        Ada.Streams.Stream_Element_Array);
+   --  Update the hash with the string.
+
+private
+
+   type Context is new Ada.Finalization.Limited_Controlled with record
+      SHA     : Encoders.SHA1.Context;
+      Key     : Ada.Streams.Stream_Element_Array (0 .. 63);
+      Key_Len : Ada.Streams.Stream_Element_Offset;
+   end record;
+
+   overriding
+   procedure Initialize
+     (E : in out Context)
+   is null;
+   --  Initialize the SHA-1 context.
+
+end AWS.OpenID.Encoders.HMAC.SHA1;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-encoders-sha1.adb Ada-development-Makefile/aws/src/openid/aws-openid-encoders-sha1.adb
--- aws.upstream/src/openid/aws-openid-encoders-sha1.adb	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-encoders-sha1.adb	2013-06-20 12:44:08.000000000 +0000
@@ -0,0 +1,423 @@
+-------------------------------------------------------------------------------
+--  The contents of this file originates from the Stephane Carrez project
+--  Ada Server Faces (util-encoders-sha1).
+--
+--  The contents has been altered by AdaHeads K/S. The changes are primarily
+--  stylistic plus removal of code that isn't directly used to complete an
+--  OpenID authentication process. Changes to the actual code (logic) are not
+--  marked specifically. AdaHeads K/S does NOT claim copyright on this file.
+--
+--  The header from the original file is included here for copyright and
+--  license information:
+--
+--  -----------------------------------------------------------------------
+--  --  util-encoders-sha1 -- Compute SHA-1 hash
+--  --  Copyright (C) 2011 Stephane Carrez
+--  --  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
+--  --
+--  --  Licensed under the Apache License, Version 2.0 (the "License");
+--  --  you may not use this file except in compliance with the License.
+--  --  You may obtain a copy of the License at
+--  --
+--  --      http://www.apache.org/licenses/LICENSE-2.0
+--  --
+--  --  Unless required by applicable law or agreed to in writing, software
+--  --  distributed under the License is distributed on an "AS IS" BASIS,
+--  --  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+--  --  implied.
+--  --  See the License for the specific language governing permissions and
+--  --  limitations under the License.
+--  -----------------------------------------------------------------------
+
+with AWS.OpenID.Encoders.Base16;
+with AWS.OpenID.Encoders.Base64;
+
+package body AWS.OpenID.Encoders.SHA1 is
+
+   use Ada.Streams;
+   use Interfaces;
+
+   Padding : constant String
+     (1 .. 64) := (1 => Character'Val (16#80#), 2 .. 64 => ASCII.NUL);
+
+   function F1
+     (B, C, D : Unsigned_32)
+      return Unsigned_32
+   is ((B and C) or ((not B) and D));
+
+   function F2
+     (B, C, D : Unsigned_32)
+      return Unsigned_32
+   is (B xor C xor D);
+
+   function F3
+     (B, C, D : Unsigned_32)
+      return Unsigned_32
+   is ((B and C) or (B and D) or (C and D));
+
+   function F4
+     (B, C, D : Unsigned_32)
+      return Unsigned_32
+   is (B xor C xor D);
+
+   function To_Unsigned_32
+     (C3, C2, C1, C0 : Character)
+      return Unsigned_32
+   is (Character'Pos (C3)
+       or Shift_Left (Unsigned_32 (Character'Pos (C2)), 8)
+       or Shift_Left (Unsigned_32 (Character'Pos (C1)), 16)
+       or Shift_Left (Unsigned_32 (Character'Pos (C0)), 24));
+
+   ---------------
+   --  Compute  --
+   ---------------
+
+   procedure Compute
+     (Ctx : in out Context)
+   is
+      W : W_Array renames Ctx.W;
+      H : H_Array renames Ctx.H;
+
+      V, A, B, C, D, E : Unsigned_32;
+   begin
+      --  Step b: For t = 16 to 79 let
+      --          W(t) = S^1(W(t-3) XOR W(t-8) XOR W(t-14) XOR W(t-16)).
+      for I in 16 .. 79 loop
+         W (I) := Rotate_Left
+           (W (I - 3) xor W (I - 8) xor W (I - 14) xor W (I - 16), 1);
+      end loop;
+
+      --  Step c: Let A = H0, B = H1, C = H2, D = H3, E = H4.
+      A := H (0);
+      B := H (1);
+      C := H (2);
+      D := H (3);
+      E := H (4);
+
+      --  Step d: For t = 0 to 79 do
+      --          TEMP = S^5(A) + f(t;B,C,D) + E + W(t) + K(t);
+      --          E = D;  D = C;  C = S^30(B);  B = A; A = TEMP;
+      for I in 0 .. 19 loop
+         V := Rotate_Left (A, 5) + F1 (B, C, D) + E + W (I) + 16#5A82_7999#;
+         E := D;
+         D := C;
+         C := Rotate_Left (B, 30);
+         B := A;
+         A := V;
+      end loop;
+
+      for I in 20 .. 39 loop
+         V := Rotate_Left (A, 5) + F2 (B, C, D) + E + W (I) + 16#6ED9_EBA1#;
+         E := D;
+         D := C;
+         C := Rotate_Left (B, 30);
+         B := A;
+         A := V;
+      end loop;
+
+      for I in 40 .. 59 loop
+         V := Rotate_Left (A, 5) + F3 (B, C, D) + E + W (I) + 16#8F1B_BCDC#;
+         E := D;
+         D := C;
+         C := Rotate_Left (B, 30);
+         B := A;
+         A := V;
+      end loop;
+
+      for I in 60 .. 79 loop
+         V := Rotate_Left (A, 5) + F4 (B, C, D) + E + W (I) + 16#CA62_C1D6#;
+         E := D;
+         D := C;
+         C := Rotate_Left (B, 30);
+         B := A;
+         A := V;
+      end loop;
+
+      --  Step e: Let H0 = H0 + A, H1 = H1 + B, H2 = H2 + C, H3 = H3 + D,
+      --  H4 = H4 + E.
+      H (0) := H (0) + A;
+      H (1) := H (1) + B;
+      H (2) := H (2) + C;
+      H (3) := H (3) + D;
+      H (4) := H (4) + E;
+   end Compute;
+
+   --------------
+   --  Finish  --
+   --------------
+
+   procedure Finish
+     (E    : in out Context;
+      Hash :    out Hash_Array)
+   is
+      C : constant Unsigned_64 := E.Count * 8;
+      N : constant Natural := E.Pos * 4 + E.Pending_Pos + 1 + 8;
+   begin
+      --  Pad to 512-bit block with 0x80 and 64-bit bit count at the end.
+      if N <= 64 then
+         Update (E, Padding (1 .. 64 - N + 1));
+      else
+         Update (E, Padding (1 .. 128 - N + 1));
+      end if;
+      pragma Assert (E.Pending_Pos = 0);
+      pragma Assert (E.Pos = 14);
+
+      E.W (14) := Unsigned_32 (Shift_Right (C, 32));
+      E.W (15) := Unsigned_32 (C and 16#0ffffffff#);
+      Compute (E);
+
+      Hash (Hash'First) :=
+        Stream_Element (Shift_Right (E.H (0), 24) and 16#0FF#);
+      Hash (Hash'First + 1) :=
+        Stream_Element (Shift_Right (E.H (0), 16) and 16#0FF#);
+      Hash (Hash'First + 2) :=
+        Stream_Element (Shift_Right (E.H (0), 8) and 16#0FF#);
+      Hash (Hash'First + 3) :=
+        Stream_Element (E.H (0) and 16#0FF#);
+
+      Hash (Hash'First + 4) :=
+        Stream_Element (Shift_Right (E.H (1), 24) and 16#0FF#);
+      Hash (Hash'First + 5) :=
+        Stream_Element (Shift_Right (E.H (1), 16) and 16#0FF#);
+      Hash (Hash'First + 6) :=
+        Stream_Element (Shift_Right (E.H (1), 8) and 16#0FF#);
+      Hash (Hash'First + 7) :=
+        Stream_Element (E.H (1) and 16#0FF#);
+
+      Hash (Hash'First + 8) :=
+        Stream_Element (Shift_Right (E.H (2), 24) and 16#0FF#);
+      Hash (Hash'First + 9) :=
+        Stream_Element (Shift_Right (E.H (2), 16) and 16#0FF#);
+      Hash (Hash'First + 10) :=
+        Stream_Element (Shift_Right (E.H (2), 8) and 16#0FF#);
+      Hash (Hash'First + 11) :=
+        Stream_Element (E.H (2) and 16#0FF#);
+
+      Hash (Hash'First + 12) :=
+        Stream_Element (Shift_Right (E.H (3), 24) and 16#0FF#);
+      Hash (Hash'First + 13) :=
+        Stream_Element (Shift_Right (E.H (3), 16) and 16#0FF#);
+      Hash (Hash'First + 14) :=
+        Stream_Element (Shift_Right (E.H (3), 8) and 16#0FF#);
+      Hash (Hash'First + 15) := Stream_Element (E.H (3) and 16#0FF#);
+
+      Hash (Hash'First + 16) :=
+        Stream_Element (Shift_Right (E.H (4), 24) and 16#0FF#);
+      Hash (Hash'First + 17) :=
+        Stream_Element (Shift_Right (E.H (4), 16) and 16#0FF#);
+      Hash (Hash'First + 18) :=
+        Stream_Element (Shift_Right (E.H (4), 8) and 16#0FF#);
+      Hash (Hash'First + 19) := Stream_Element (E.H (4) and 16#0FF#);
+
+      --  Re-initialize for the next hash.
+      E.Initialize;
+   end Finish;
+
+   --------------
+   --  Finish  --
+   --------------
+
+   procedure Finish
+     (E    : in out Context;
+      Hash :    out Digest)
+   is
+      Buf : Ada.Streams.Stream_Element_Array (1 .. Hash'Length);
+      for Buf'Address use Hash'Address;
+      pragma Import (Ada, Buf);
+
+      B       : Encoders.Base16.Encoder;
+      Encoded : Ada.Streams.Stream_Element_Offset;
+      H       : Hash_Array;
+      Last    : Ada.Streams.Stream_Element_Offset;
+   begin
+      Finish (E, H);
+      B.Transform (Data => H, Into => Buf, Last => Last, Encoded => Encoded);
+   end Finish;
+
+   --------------
+   --  Finish  --
+   --------------
+
+   procedure Finish_Base64
+     (E    : in out Context;
+      Hash :    out Base64_Digest)
+   is
+      Buf : Ada.Streams.Stream_Element_Array (1 .. Hash'Length);
+      for Buf'Address use Hash'Address;
+      pragma Import (Ada, Buf);
+
+      B       : Encoders.Base64.Encoder;
+      Encoded : Ada.Streams.Stream_Element_Offset;
+      H       : Hash_Array;
+      Last    : Ada.Streams.Stream_Element_Offset;
+   begin
+      Finish (E, H);
+      B.Transform (Data => H, Into => Buf, Last => Last, Encoded => Encoded);
+   end Finish_Base64;
+
+   ------------------
+   --  Initialize  --
+   ------------------
+
+   overriding
+   procedure Initialize
+     (E : in out Context)
+   is
+   begin
+      E.Count := 0;
+      E.Pending_Pos := 0;
+      E.Pos   := 0;
+      E.H (0) := 16#67452301#;
+      E.H (1) := 16#EFCDAB89#;
+      E.H (2) := 16#98BADCFE#;
+      E.H (3) := 16#10325476#;
+      E.H (4) := 16#C3D2E1F0#;
+   end Initialize;
+
+   -----------------
+   --  Transform  --
+   -----------------
+
+   overriding
+   procedure Transform
+     (E       :        Encoder;
+      Data    :        Ada.Streams.Stream_Element_Array;
+      Into    :    out Ada.Streams.Stream_Element_Array;
+      Last    :    out Ada.Streams.Stream_Element_Offset;
+      Encoded :    out Ada.Streams.Stream_Element_Offset)
+   is
+      pragma Unreferenced (E);
+
+      Hash        : Ada.Streams.Stream_Element_Array (0 .. 19);
+      Hex_Encoder : Encoders.Base16.Encoder;
+      Sha_Encoder : Context;
+   begin
+      Update (Sha_Encoder, Data);
+      Finish (Sha_Encoder, Hash);
+      Hex_Encoder.Transform (Data    => Hash,
+                             Into    => Into,
+                             Last    => Last,
+                             Encoded => Encoded);
+      Encoded := Data'Last;
+   end Transform;
+
+   --------------
+   --  Update  --
+   --------------
+
+   procedure Update
+     (E : in out Context;
+      S :        Ada.Streams.Stream_Element_Array)
+   is
+      Buf : String (1 .. S'Length);
+      for Buf'Address use S'Address;
+      pragma Import (Ada, Buf);
+   begin
+      E.Update (Buf);
+   end Update;
+
+   --------------
+   --  Update  --
+   --------------
+
+   procedure Update
+     (E : in out Context;
+      S :    String)
+   is
+      I : Natural := S'First;
+      N : Natural := E.Pos;
+   begin
+      if S'Length = 0 then
+         return;
+      end if;
+      E.Count := E.Count + S'Length;
+
+      --  If we have pending characters, try to make a current word with the
+      --  string. If the string is not wide enough, save it in the pending
+      --  context array. We can save at most 3 bytes.
+      case E.Pending_Pos is
+         when 1 =>
+            if S'Length >= 3 then
+               E.W (N) := To_Unsigned_32 (S (I + 2),
+                                          S (I + 1),
+                                          S (I + 0),
+                                          E.Pending (1));
+               E.Pending_Pos := 0;
+               N := N + 1;
+               if N = 16 then
+                  Compute (E);
+                  N := 0;
+               end if;
+               I := S'First + 3;
+            else
+               E.Pending (2) := S (I + 0);
+               if I + 1 >= S'Last then
+                  E.Pending (3) := S (I + 1);
+                  E.Pending_Pos := 3;
+               else
+                  E.Pending_Pos := 2;
+               end if;
+               return;
+            end if;
+
+         when 2 =>
+            if S'Length >= 2 then
+               E.W (N) := To_Unsigned_32 (S (I + 1),
+                                          S (I + 0),
+                                          E.Pending (2),
+                                          E.Pending (1));
+               E.Pending_Pos := 0;
+               N := N + 1;
+               if N = 16 then
+                  Compute (E);
+                  N := 0;
+               end if;
+               I := S'First + 2;
+            else
+               E.Pending (3) := S (I + 0);
+               E.Pending_Pos := 3;
+               return;
+            end if;
+
+         when 3 =>
+            E.W (N) := To_Unsigned_32 (S (I + 0),
+                                       E.Pending (3),
+                                       E.Pending (2),
+                                       E.Pending (1));
+            E.Pending_Pos := 0;
+            N := N + 1;
+            if N = 16 then
+               Compute (E);
+               N := 0;
+            end if;
+            I := S'First + 1;
+
+         when others =>
+            I := S'First;
+      end case;
+
+      --  Fill the 32-bit word block array.  When we have a full 512-bit block,
+      --  compute the hash pass.
+      while I + 3 <= S'Last loop
+         E.W (N) := To_Unsigned_32 (S (I + 3),
+                                    S (I + 2),
+                                    S (I + 1),
+                                    S (I + 0));
+         I := I + 4;
+         N := N + 1;
+         if N = 16 then
+            Compute (E);
+            N := 0;
+         end if;
+      end loop;
+      E.Pos := N;
+
+      --  Save what remains in the pending buffer.
+      N := S'Last + 1 - I;
+      if N > 0 then
+         E.Pending (1 .. N) := S (I .. S'Last);
+         E.Pending_Pos := N;
+      end if;
+   end Update;
+
+end AWS.OpenID.Encoders.SHA1;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-encoders-sha1.ads Ada-development-Makefile/aws/src/openid/aws-openid-encoders-sha1.ads
--- aws.upstream/src/openid/aws-openid-encoders-sha1.ads	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-encoders-sha1.ads	2013-06-20 12:44:08.000000000 +0000
@@ -0,0 +1,112 @@
+-------------------------------------------------------------------------------
+--  The contents of this file originates from the Stephane Carrez project
+--  Ada Server Faces (util-encoders-sha1).
+--
+--  The contents has been altered by AdaHeads K/S. The changes are primarily
+--  stylistic plus removal of code that isn't directly used to complete an
+--  OpenID authentication process. Changes to the actual code (logic) are not
+--  marked specifically. AdaHeads K/S does NOT claim copyright on this file.
+--
+--  The header from the original file is included here for copyright and
+--  license information:
+--
+--  -----------------------------------------------------------------------
+--  --  util-encoders-sha1 -- Compute SHA-1 hash
+--  --  Copyright (C) 2011 Stephane Carrez
+--  --  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
+--  --
+--  --  Licensed under the Apache License, Version 2.0 (the "License");
+--  --  you may not use this file except in compliance with the License.
+--  --  You may obtain a copy of the License at
+--  --
+--  --      http://www.apache.org/licenses/LICENSE-2.0
+--  --
+--  --  Unless required by applicable law or agreed to in writing, software
+--  --  distributed under the License is distributed on an "AS IS" BASIS,
+--  --  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+--  --  implied.
+--  --  See the License for the specific language governing permissions and
+--  --  limitations under the License.
+--  -----------------------------------------------------------------------
+
+with Ada.Finalization;
+with Ada.Streams;
+with Interfaces;
+
+package AWS.OpenID.Encoders.SHA1 is
+
+   type Context is limited private;
+   type Encoder is new Encoders.Transformer with private;
+
+   subtype Base64_Digest is String (1 .. 28);
+   subtype Digest is String (1 .. 40);
+   subtype Hash_Array is Ada.Streams.Stream_Element_Array (0 .. 19);
+
+   procedure Finish
+     (E    : in out Context;
+      Hash :    out Hash_Array);
+   --  Computes the SHA1 hash and returns the raw binary hash in Hash.
+
+   procedure Finish
+     (E    : in out Context;
+      Hash :    out Digest);
+   --  Computes the SHA1 hash and returns the hexadecimal hash in Hash.
+
+   procedure Finish_Base64
+     (E    : in out Context;
+      Hash :    out Base64_Digest);
+   --  Computes the SHA1 hash and returns the base64 hash in Hash.
+
+   procedure Update
+     (E : in out Context;
+      S :        String);
+   --  Update the hash with the string.
+
+   procedure Update
+     (E : in out Context;
+      S :        Ada.Streams.Stream_Element_Array);
+   --  Update the hash with the string.
+
+   overriding
+   procedure Transform
+     (E       :        Encoder;
+      Data    :        Ada.Streams.Stream_Element_Array;
+      Into    :    out Ada.Streams.Stream_Element_Array;
+      Last    :    out Ada.Streams.Stream_Element_Offset;
+      Encoded :    out Ada.Streams.Stream_Element_Offset);
+   --  Transform the Data input stream into the Into output stream. If the
+   --  transformer does not have enough room to write the result, it must
+   --  return in Encoded the index of the last encoded position in the Data
+   --  stream.
+   --
+   --  Last is the last valid position in the Into output stream.
+   --
+   --  The Encoding_Error exception is raised if the input stream cannot be
+   --  transformed.
+
+private
+
+   type Encoder is new Encoders.Transformer with null record;
+   type H_Array is array (0 .. 4) of Interfaces.Unsigned_32;
+   type W_Array is array (0 .. 79) of Interfaces.Unsigned_32;
+
+   type Context is new Ada.Finalization.Limited_Controlled with
+      record
+         W           : W_Array;
+         H           : H_Array;
+         Pos         : Natural;
+         Count       : Interfaces.Unsigned_64;
+         Pending     : String (1 .. 3);
+         Pending_Pos : Natural;
+      end record;
+
+   procedure Compute
+     (Ctx : in out Context);
+   --  Process the message block collected in the context.
+
+   overriding
+   procedure Initialize
+     (E : in out Context);
+   --  Initialize the SHA-1 context.
+
+end AWS.OpenID.Encoders.SHA1;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-error_messages.adb Ada-development-Makefile/aws/src/openid/aws-openid-error_messages.adb
--- aws.upstream/src/openid/aws-openid-error_messages.adb	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-error_messages.adb	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,115 @@
+-------------------------------------------------------------------------------
+--                                                                           --
+--                      Copyright (C) 2012-, AdaHeads K/S                    --
+--                                                                           --
+--  This is free software;  you can redistribute it and/or modify it         --
+--  under terms of the  GNU General Public License  as published by the      --
+--  Free Software  Foundation;  either version 3,  or (at your  option) any  --
+--  later version. This library is distributed in the hope that it will be   --
+--  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  --
+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     --
+--  You should have received a copy of the GNU General Public License and    --
+--  a copy of the GCC Runtime Library Exception along with this program;     --
+--  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+--  <http://www.gnu.org/licenses/>.                                          --
+--                                                                           --
+-------------------------------------------------------------------------------
+
+with AWS.Messages;
+with AWS.MIME;
+
+package body AWS.OpenID.Error_Messages is
+
+   -----------------------------
+   --  Authentication_Failed  --
+   -----------------------------
+
+   function Authentication_Failed
+     (Request :    AWS.Status.Data)
+     return AWS.Response.Data
+   is
+      pragma Unreferenced (Request);
+   begin
+      return AWS.Response.Build
+        (Content_Type => AWS.MIME.Text_HTML,
+         Status_Code  => AWS.Messages.S403,
+         Message_Body =>
+           "<html><head><title>Authentication failed" &
+           "</title></head><body></body><h1>" &
+           "Authentication failed</h1><p>Your OpenID " &
+           "provider failed to authenticate you " &
+           "properly.</p></html>");
+   end Authentication_Failed;
+
+   -------------------------
+   --  Invalid_End_Point  --
+   -------------------------
+
+   function Invalid_End_Point
+     (Request :    AWS.Status.Data)
+      return AWS.Response.Data
+   is
+      use AWS.Status;
+
+      Provider : constant String
+        := Parameters (Request).Get (Provider_Parameter_Name);
+   begin
+      return AWS.Response.Build
+        (Content_Type => AWS.MIME.Text_HTML,
+         Status_Code  => AWS.Messages.S403,
+         Message_Body =>
+           "<html><head><title>Invalid end-point</title>" &
+           "</head><body></body><h1>Invalid end-point" &
+           "</h1><p><q><code>" & Provider & "</code></q> " &
+           "does not refer to a valid end-point.</p>" &
+           "</html>");
+   end Invalid_End_Point;
+
+   -------------------
+   --  Invalid_URL  --
+   -------------------
+
+   function Invalid_URL
+     (Request :    AWS.Status.Data)
+      return AWS.Response.Data
+   is
+      use AWS.Status;
+
+      Provider : constant String
+        := Parameters (Request).Get (Provider_Parameter_Name);
+   begin
+      return AWS.Response.Build
+        (Content_Type => AWS.MIME.Text_HTML,
+         Status_Code  => AWS.Messages.S403,
+         Message_Body =>
+           "<html><head><title>Invalid URL</title>" &
+           "</head><body></body><h1>Invalid URL</h1>" &
+           "<p><q><code>" & Provider & "</code></q> is not " &
+           "a valid URL.</p></html>");
+   end Invalid_URL;
+
+   ------------------------
+   --  Provider_Offline  --
+   ------------------------
+
+   function Provider_Offline
+     (Request :    AWS.Status.Data)
+      return AWS.Response.Data
+   is
+      use AWS.Status;
+
+      Provider : constant String
+        := Parameters (Request).Get (Provider_Parameter_Name);
+   begin
+      return AWS.Response.Build
+        (Content_Type => AWS.MIME.Text_HTML,
+         Status_Code  => AWS.Messages.S403,
+         Message_Body =>
+           "<html><head><title>Provider offline</title>" &
+           "</head><body></body><h1>Provider offline" &
+           "</h1><p>The OpenID provider at <q><code>" &
+           Provider & "</code></q> seems to be offline at " &
+           "the moment.</p></html>");
+   end Provider_Offline;
+
+end AWS.OpenID.Error_Messages;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-error_messages.ads Ada-development-Makefile/aws/src/openid/aws-openid-error_messages.ads
--- aws.upstream/src/openid/aws-openid-error_messages.ads	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-error_messages.ads	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,43 @@
+-------------------------------------------------------------------------------
+--                                                                           --
+--                      Copyright (C) 2012-, AdaHeads K/S                    --
+--                                                                           --
+--  This is free software;  you can redistribute it and/or modify it         --
+--  under terms of the  GNU General Public License  as published by the      --
+--  Free Software  Foundation;  either version 3,  or (at your  option) any  --
+--  later version. This library is distributed in the hope that it will be   --
+--  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  --
+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     --
+--  You should have received a copy of the GNU General Public License and    --
+--  a copy of the GCC Runtime Library Exception along with this program;     --
+--  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+--  <http://www.gnu.org/licenses/>.                                          --
+--                                                                           --
+-------------------------------------------------------------------------------
+
+with AWS.Response;
+with AWS.Status;
+
+package AWS.OpenID.Error_Messages is
+
+   function Authentication_Failed
+     (Request :    AWS.Status.Data)
+     return AWS.Response.Data;
+   --  Return a 403 and generate a generic authentication failed error message.
+
+   function Invalid_End_Point
+     (Request :    AWS.Status.Data)
+      return AWS.Response.Data;
+   --  Return a 403 and generate a generic invalid end point error message.
+
+   function Invalid_URL
+     (Request :    AWS.Status.Data)
+      return AWS.Response.Data;
+   --  Return a 403 and generate a generic invalid URL error message.
+
+   function Provider_Offline
+     (Request :    AWS.Status.Data)
+      return AWS.Response.Data;
+   --  Return a 403 and generate a generic provider offline error message.
+
+end AWS.OpenID.Error_Messages;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-log.ads Ada-development-Makefile/aws/src/openid/aws-openid-log.ads
--- aws.upstream/src/openid/aws-openid-log.ads	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-log.ads	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,31 @@
+-------------------------------------------------------------------------------
+--                                                                           --
+--                      Copyright (C) 2012-, AdaHeads K/S                    --
+--                                                                           --
+--  This is free software;  you can redistribute it and/or modify it         --
+--  under terms of the  GNU General Public License  as published by the      --
+--  Free Software  Foundation;  either version 3,  or (at your  option) any  --
+--  later version. This library is distributed in the hope that it will be   --
+--  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  --
+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     --
+--  You should have received a copy of the GNU General Public License and    --
+--  a copy of the GCC Runtime Library Exception along with this program;     --
+--  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+--  <http://www.gnu.org/licenses/>.                                          --
+--                                                                           --
+-------------------------------------------------------------------------------
+
+with AWS.Log;
+
+package AWS.OpenID.Log is
+
+   procedure Write_To_Dev_Null
+     (Message :    String)
+   is null;
+
+   Info    : not null AWS.Log.Callback := Write_To_Dev_Null'Access;
+   Debug   : not null AWS.Log.Callback := Write_To_Dev_Null'Access;
+   Error   : not null AWS.Log.Callback := Write_To_Dev_Null'Access;
+   Warning : not null AWS.Log.Callback := Write_To_Dev_Null'Access;
+
+end AWS.OpenID.Log;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-manual_dispatching.adb Ada-development-Makefile/aws/src/openid/aws-openid-manual_dispatching.adb
--- aws.upstream/src/openid/aws-openid-manual_dispatching.adb	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-manual_dispatching.adb	2013-10-28 12:35:08.000000000 +0000
@@ -0,0 +1,247 @@
+-------------------------------------------------------------------------------
+--                                                                           --
+--                      Copyright (C) 2012-, AdaHeads K/S                    --
+--                                                                           --
+--  This is free software;  you can redistribute it and/or modify it         --
+--  under terms of the  GNU General Public License  as published by the      --
+--  Free Software  Foundation;  either version 3,  or (at your  option) any  --
+--  later version. This library is distributed in the hope that it will be   --
+--  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  --
+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     --
+--  You should have received a copy of the GNU General Public License and    --
+--  a copy of the GCC Runtime Library Exception along with this program;     --
+--  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+--  <http://www.gnu.org/licenses/>.                                          --
+--                                                                           --
+-------------------------------------------------------------------------------
+
+with Ada.Exceptions;
+with Ada.Strings.Unbounded;
+
+with AWS.OpenID.Association_Database;
+with AWS.OpenID.Authentication_Database;
+with AWS.OpenID.Log;
+with AWS.URL;
+
+private with AWS.OpenID.Security;
+
+package body AWS.OpenID.Manual_Dispatching is
+
+   Realm : Security.Manager;
+
+   package body Log_In is
+
+      ---------------
+      --  Service  --
+      ---------------
+
+      function Service
+        (Request :    AWS.Status.Data)
+         return AWS.Response.Data
+      is
+         use Ada.Exceptions;
+
+         End_Point   : Security.End_Point;
+         Association : Security.Association;
+      begin
+         if Authentication_Database.Is_Authenticated (Request) then
+            return AWS.Response.URL (Logged_In.URI);
+         end if;
+
+         declare
+            Provider : constant String
+              := AWS.Status.Parameters (Request).Get (Provider_Parameter_Name);
+         begin
+            Security.Discover (Realm  => Realm,
+                               Name   => Provider,
+                               Result => End_Point);
+         exception
+            when Constraint_Error =>
+               return Invalid_URL (Request);
+            when Security.Invalid_End_Point =>
+               return Invalid_End_Point (Request);
+            when Security.Service_Error =>
+               return Provider_Offline (Request);
+         end;
+
+         Security.Associate (Realm  => Realm,
+                             OP     => End_Point,
+                             Result => Association);
+         Association_Database.Insert (Association);
+
+         declare
+            URL : constant String := Security.Get_Authentication_URL
+              (Realm => Realm,
+               OP    => End_Point,
+               Assoc => Association);
+         begin
+            return AWS.Response.URL (URL);
+         end;
+      exception
+         when E : others =>
+            Log.Error
+              ("Exception in " &
+                 "AWS.OpenID.Manual_Dispatching.Log_In.Service: " &
+                 Exception_Information (E));
+
+            if Authentication_Database.Is_Authenticated (Request) then
+               --  For some odd reason we've got both an exception and the user
+               --  is authenticated, which should never happen, so we do a
+               --  pre-cautionary log out of the user. Better safe than sorry.
+               return Log_Out.Service (Request);
+            else
+               return Authentication_Failed (Request);
+            end if;
+      end Service;
+
+   end Log_In;
+
+   package body Validate is
+
+      ---------------
+      --  Service  --
+      ---------------
+
+      function Service
+        (Request :    AWS.Status.Data)
+         return AWS.Response.Data
+      is
+         use Ada.Exceptions;
+
+         Handle         : Ada.Strings.Unbounded.Unbounded_String;
+         Association    : Security.Association;
+         Authentication : Security.Authentication;
+      begin
+         Handle := Security.Handle (Request);
+
+         if not Association_Database.Has (Handle) then
+            return Authentication_Failed (Request);
+         end if;
+
+         Association := Association_Database.Look_Up (Handle);
+         Authentication := Security.Verify (Realm   => Realm,
+                                            Assoc   => Association,
+                                            Request => Request);
+
+         if Security.Authenticated (Authentication) then
+            return Result : AWS.Response.Data do
+               Result :=
+                 AWS.Response.URL (Logged_In.URI);
+
+               Authentication_Database.Register_Identity
+                 (Source   => Authentication,
+                  Request  => Request,
+                  Response => Result);
+            end return;
+         else
+            return Authentication_Failed (Request);
+         end if;
+      exception
+         when E : others =>
+            Log.Error
+              ("Exception in " &
+                 "AWS.OpenID.Manual_Dispatching.Validate.Service: " &
+                 Exception_Information (E));
+
+            if Authentication_Database.Is_Authenticated (Request) then
+               --  For some odd reason we've got both an exception and the user
+               --  is authenticated, which should never happen, so we do a
+               --  pre-cautionary log out of the user. Better safe than sorry.
+               return Log_Out.Service (Request);
+            else
+               return Authentication_Failed (Request);
+            end if;
+      end Service;
+
+   end Validate;
+
+   package body Log_Out is
+
+      ---------------
+      --  Service  --
+      ---------------
+
+      function Service
+        (Request :    AWS.Status.Data)
+         return AWS.Response.Data
+      is
+         use Ada.Exceptions;
+
+         Response : AWS.Response.Data;
+      begin
+         Response :=
+           AWS.Response.URL (Protocol & Host_Name & Logged_Out.URI);
+
+         Authentication_Database.Delete_Identity
+           (Request  => Request,
+            Response => Response);
+
+         return Response;
+      exception
+         when E : others =>
+            Log.Error
+              ("Exception in " &
+                 "AWS.OpenID.Manual_Dispatching.Log_Out.Service: " &
+                 Exception_Information (E));
+
+            if Authentication_Database.Is_Authenticated (Request) then
+               --  This is really bad.
+               Log.Error
+                 ("AWS.OpenID.Manual_Dispatching.Log_Out.Service cannot " &
+                    "log user out");
+               raise;
+            else
+               return Authentication_Failed (Request);
+            end if;
+      end Service;
+
+   end Log_Out;
+
+   ------------------------
+   --  Authenticated_As  --
+   ------------------------
+
+   function Authenticated_As
+     (Request :    AWS.Status.Data)
+      return String
+   is
+   begin
+      return Authentication_Database.Identity (Request);
+   end Authenticated_As;
+
+   ------------------------
+   --  Is_Authenticated  --
+   ------------------------
+
+   function Is_Authenticated
+     (Request :    AWS.Status.Data)
+      return Boolean
+   is
+   begin
+      return Authentication_Database.Is_Authenticated (Request);
+   end Is_Authenticated;
+
+   function Unchecked_Log_In (Request : AWS.Status.Data)
+                             return AWS.Response.Data is
+   begin
+      return Response : AWS.Response.Data do
+         Response := AWS.Response.URL (Logged_In.URI);
+
+         if not Authentication_Database.Is_Authenticated (Request) then
+            Authentication_Database.Register_Identity
+              (Identity => AWS.URL.Parse
+                             (AWS.Status.Parameters
+                                (Request).Get (Provider_Parameter_Name)),
+               Request  => Request,
+               Response => Response);
+         end if;
+      end return;
+   end Unchecked_Log_In;
+
+begin
+
+   Security.Initialize (Realm     => Realm,
+                        Domain    => Protocol & Host_Name,
+                        Return_To => Return_To_Page);
+
+end AWS.OpenID.Manual_Dispatching;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-manual_dispatching.ads Ada-development-Makefile/aws/src/openid/aws-openid-manual_dispatching.ads
--- aws.upstream/src/openid/aws-openid-manual_dispatching.ads	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-manual_dispatching.ads	2013-10-28 12:34:37.000000000 +0000
@@ -0,0 +1,123 @@
+-------------------------------------------------------------------------------
+--                                                                           --
+--                      Copyright (C) 2012-, AdaHeads K/S                    --
+--                                                                           --
+--  This is free software;  you can redistribute it and/or modify it         --
+--  under terms of the  GNU General Public License  as published by the      --
+--  Free Software  Foundation;  either version 3,  or (at your  option) any  --
+--  later version. This library is distributed in the hope that it will be   --
+--  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  --
+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     --
+--  You should have received a copy of the GNU General Public License and    --
+--  a copy of the GCC Runtime Library Exception along with this program;     --
+--  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+--  <http://www.gnu.org/licenses/>.                                          --
+--                                                                           --
+-------------------------------------------------------------------------------
+
+with AWS.Dispatchers.Callback;
+with AWS.Response;
+with AWS.Status;
+
+generic
+
+   Authentication_Failed : AWS.Response.Callback;
+   --  Is called when the OpenID authentication has failed.
+
+   Host_Name             : String;
+   --  The hostname. This is is appended to Protocol and the resulting string
+   --  prefixed to the various Log* strings to create the URL's needed to
+   --  handle an OpenID authentication request.
+
+   Invalid_End_Point     : AWS.Response.Callback;
+   --  Is called when the OpenID end point is bad.
+
+   Invalid_URL           : AWS.Response.Callback;
+   --  Is called when the OpenID provider URL isn't valid.
+
+   Log_In_Page           : String := "/log_in";
+   --  This is where the OpenID login procedure starts.
+
+   Logged_In_Page        : String := "/logged_in";
+   --  We're redirected to this page when the OpenID authentication succeeded.
+
+   Log_Out_Page          : String := "/log_out";
+   --  This is where we go to log out.
+
+   Logged_Out_Page       : String := "/logged_out";
+   --  We're redirected here when a log out request succeeded.
+
+   Protocol              : String := "https://";
+   --  Protocol is prefixed to Host_Name to build the full URL.
+
+   Provider_Offline      : AWS.Response.Callback;
+   --  Is called when the OpenID provider is offline.
+
+   Return_To_Page        : String := "/return_to";
+   --  The page we return to after the OpenID authentication is completed.
+
+package AWS.OpenID.Manual_Dispatching is
+
+   package Log_In is
+      URI : constant String := Log_In_Page;
+
+      function Service
+        (Request :    AWS.Status.Data)
+         return AWS.Response.Data;
+      --  Redirect to the OpenID provider.
+
+      Callback : constant AWS.Dispatchers.Callback.Handler
+        := AWS.Dispatchers.Callback.Create (Service'Access);
+   end Log_In;
+
+   package Validate is
+      URI : constant String := Return_To_Page;
+
+      function Service
+        (Request :    AWS.Status.Data)
+         return AWS.Response.Data;
+      --  Upon successful completion of OpenID login, add the user to the
+      --  authentication database and forward to the Logged_In.URI. On
+      --  failure call the Authentication_Failed callback.
+
+      Callback : constant AWS.Dispatchers.Callback.Handler
+        := AWS.Dispatchers.Callback.Create (Service'Access);
+   end Validate;
+
+   package Logged_In is
+      URI : constant String := Logged_In_Page;
+   end Logged_In;
+
+   package Log_Out is
+      URI : constant String := Log_Out_Page;
+
+      function Service
+        (Request :    AWS.Status.Data)
+         return AWS.Response.Data;
+      --  Delete the user from the authentication database and forward to
+      --  Logged_Out.URI.
+
+      Callback : constant AWS.Dispatchers.Callback.Handler
+        := AWS.Dispatchers.Callback.Create (Service'Access);
+   end Log_Out;
+
+   package Logged_Out is
+      URI : constant String := Logged_Out_Page;
+   end Logged_Out;
+
+   function Authenticated_As
+     (Request :    AWS.Status.Data)
+      return String;
+   --  Return the identity of the user.
+
+   function Is_Authenticated
+     (Request :    AWS.Status.Data)
+      return Boolean;
+   --  Return True if the user is authenticated.
+
+   function Unchecked_Log_In
+     (Request : AWS.Status.Data) return AWS.Response.Data;
+   --  Skip the OpenID authentication procedure and log the user in
+   --  without any checks.
+
+end AWS.OpenID.Manual_Dispatching;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-security.adb Ada-development-Makefile/aws/src/openid/aws-openid-security.adb
--- aws.upstream/src/openid/aws-openid-security.adb	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-security.adb	2013-06-26 11:38:17.000000000 +0000
@@ -0,0 +1,702 @@
+-------------------------------------------------------------------------------
+--  The contents of this file originates from the Stephane Carrez project
+--  Ada Server Faces (security-openid).
+--
+--  The contents has been altered by AdaHeads K/S. The changes are primarily
+--  stylistic plus removal of code that isn't directly used to complete an
+--  OpenID authentication process. Changes to the actual code (logic) are not
+--  marked specifically. AdaHeads K/S does NOT claim copyright on this file.
+--
+--  The header from the original file is included here for copyright and
+--  license information:
+--
+--  -----------------------------------------------------------------------
+--  --  security-openid -- Open ID 2.0 Support
+--  --  Copyright (C) 2009, 2010, 2011 Stephane Carrez
+--  --  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
+--  --
+--  --  Licensed under the Apache License, Version 2.0 (the "License");
+--  --  you may not use this file except in compliance with the License.
+--  --  You may obtain a copy of the License at
+--  --
+--  --      http://www.apache.org/licenses/LICENSE-2.0
+--  --
+--  --  Unless required by applicable law or agreed to in writing, software
+--  --  distributed under the License is distributed on an "AS IS" BASIS,
+--  --  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+--  --  See the License for the specific language governing permissions and
+--  --  limitations under the License.
+--  -----------------------------------------------------------------------
+
+with Ada.Strings.Fixed;
+
+with AWS.Client;
+with AWS.Headers;
+with AWS.Headers.Set;
+with AWS.Messages;
+with AWS.Response;
+
+with AWS.OpenID.Encoders;
+with AWS.OpenID.Encoders.HMAC.SHA1;
+with AWS.OpenID.Encoders.SHA1;
+with AWS.OpenID.Log;
+
+package body AWS.OpenID.Security is
+
+   function Extract
+     (From      : String;
+      Start_Tag : String;
+      End_Tag   : String)
+      return String;
+
+   procedure Extract_Profile
+     (Prefix  :        String;
+      Request :        AWS.Status.Data;
+      Result  : in out Authentication);
+
+   procedure Extract_Value
+     (Into    : in out Unbounded_String;
+      Request :        AWS.Status.Data;
+      Name    :        String);
+
+   function Get_Association_Query
+     return String;
+
+   procedure Log_Verification
+     (Succeeded :    Boolean;
+      Message   :    String);
+
+   -----------------
+   --  Associate  --
+   -----------------
+
+   procedure Associate
+     (Realm  : in out Manager;
+      OP     :        End_Point;
+      Result :    out Association)
+   is
+      pragma Unreferenced (Realm);
+
+      use Ada.Calendar;
+      use AWS.Response;
+      use type AWS.Messages.Status_Code;
+
+      Last   : Natural;
+      N      : Natural;
+      Output : Unbounded_String;
+      Params : constant String := Get_Association_Query;
+      Pos    : Natural;
+      Reply  : AWS.Response.Data;
+      URI    : constant String := To_String (OP.URL);
+   begin
+      Reply := AWS.Client.Post (URL  => URI,
+                                Data => Params);
+
+      if Status_Code (Reply) /= AWS.Messages.S200 then
+         Log.Error ("Received error " &
+                      AWS.Messages.Status_Code'Image (Status_Code (Reply)) &
+                      " when creating association with " &
+                      URI);
+
+         raise Service_Error with
+           "Cannot create association with OpenID provider.";
+      end if;
+
+      Output := AWS.Response.Message_Body (Reply);
+      Pos := 1;
+
+      while Pos < Length (Output) loop
+         N := Index (Output, ":", Pos);
+
+         exit when N = 0;
+
+         Last := Index (Output, "" & ASCII.LF, N);
+
+         if Last = 0 then
+            Last := Length (Output);
+         else
+            Last := Last - 1;
+         end if;
+
+         declare
+            Key : constant String := Slice (Output, Pos, N - 1);
+         begin
+            if Key = "session_type" then
+               Result.Session_Type := Unbounded_Slice (Output, N + 1, Last);
+            elsif Key = "assoc_type" then
+               Result.Assoc_Type := Unbounded_Slice (Output, N + 1, Last);
+            elsif Key = "assoc_handle" then
+               Log.Debug
+                 ("Extracting 'assoc_handle' from result...");
+               Result.Assoc_Handle := Unbounded_Slice (Output, N + 1, Last);
+            elsif Key = "mac_key" then
+               Result.Mac_Key := Unbounded_Slice (Output, N + 1, Last);
+            elsif Key = "expires_in" then
+               declare
+                  Val : constant String := Slice (Output, N + 1, Last);
+               begin
+                  Log.Info ("Expires: |" & Val & "|");
+                  Result.Expired := Clock + Duration'Value (Val);
+               exception
+                  when Constraint_Error =>
+                     --  expires_in could not be cast to a Duration.
+                     Log.Error
+                       (URI & " returned a bad expires_in value: " & Val);
+
+                     raise Service_Error with
+                       "Assocation error. Bad expires_in value given: " & Val;
+               end;
+            elsif Key /= "ns" then
+               Log.Error ("Key not recognized: " & Key);
+            end if;
+         end;
+
+         Pos := Last + 2;
+      end loop;
+
+      Log.Debug ("Received end point " & To_String (Output));
+   end Associate;
+
+   ---------------------
+   --  Authenticated  --
+   ---------------------
+
+   function Authenticated
+     (Auth :    Authentication)
+      return Boolean
+   is
+   begin
+      return Status (Auth) = Authenticated;
+   end Authenticated;
+
+   ----------------
+   --  Discover  --
+   ----------------
+
+   procedure Discover
+     (Realm  : in out Manager;
+      Name   :        String;
+      Result :    out End_Point)
+   is
+   begin
+      Manager'Class (Realm).Discover_XRDS (URI    => Name,
+                                           Result => Result);
+   end Discover;
+
+   ---------------------
+   --  Discover_XRDS  --
+   ---------------------
+
+   procedure Discover_XRDS
+     (Realm  : in out Manager;
+      URI    :        String;
+      Result :    out End_Point)
+   is
+      use AWS.Headers.Set;
+      use AWS.Response;
+      use type AWS.Messages.Status_Code;
+
+      Headers : AWS.Headers.List;
+      Reply   : AWS.Response.Data;
+   begin
+      Log.Info ("Discover XRDS on " & URI);
+
+      Add (Headers, "Accept", "application/xrds+xml");
+
+      Reply := AWS.Client.Get (URL                => URI,
+                               Follow_Redirection => True,
+                               Headers            => Headers);
+
+      if Status_Code (Reply) /= AWS.Messages.S200 then
+         Log.Error ("Received error " &
+                      AWS.Messages.Status_Code'Image (Status_Code (Reply)) &
+                      " when discovering XRDS on " &
+                      URI);
+
+         raise Service_Error with
+           "Discovering XRDS of OpenID provider failed.";
+      end if;
+
+      Manager'Class (Realm).Extract_XRDS (Content => Message_Body (Reply),
+                                          Result  => Result);
+   end Discover_XRDS;
+
+   ---------------
+   --  Extract  --
+   ---------------
+
+   function Extract
+     (From      : String;
+      Start_Tag : String;
+      End_Tag   : String)
+      return String
+   is
+      use Ada.Strings.Fixed;
+
+      Pos     : Natural := Index (From, Start_Tag);
+      Last    : Natural;
+      URL_Pos : Natural;
+   begin
+      if Pos = 0 then
+         Pos := Index (From,
+                       Start_Tag (Start_Tag'First .. Start_Tag'Last - 1));
+         if Pos = 0 then
+            return "";
+         end if;
+
+         Pos := Index (From, ">", Pos + 1);
+         if Pos = 0 then
+            return "";
+         end if;
+
+         URL_Pos := Pos + 1;
+      else
+         URL_Pos := Pos + Start_Tag'Length;
+      end if;
+
+      Last := Index (From, End_Tag, Pos);
+      if Last <= Pos then
+         return "";
+      end if;
+
+      return From (URL_Pos .. Last - 1);
+   end Extract;
+
+   -----------------------
+   --  Extract_Profile  --
+   -----------------------
+
+   procedure Extract_Profile
+     (Prefix  :        String;
+      Request :        AWS.Status.Data;
+      Result  : in out Authentication)
+   is
+   begin
+      Extract_Value (Result.Email,      Request, Prefix & ".email");
+      Extract_Value (Result.Nickname,   Request, Prefix & ".nickname");
+      Extract_Value (Result.Gender,     Request, Prefix & ".gender");
+      Extract_Value (Result.Country,    Request, Prefix & ".country");
+      Extract_Value (Result.Language,   Request, Prefix & ".language");
+      Extract_Value (Result.Full_Name,  Request, Prefix & ".fullname");
+      Extract_Value (Result.Timezone,   Request, Prefix & ".timezone");
+      Extract_Value (Result.First_Name, Request, Prefix & ".firstname");
+      Extract_Value (Result.Last_Name,  Request, Prefix & ".lastname");
+
+      --  If the fullname is not specified, try to build one from the
+      --  first_name and last_name.
+      if Length (Result.Full_Name) = 0 then
+         Append (Result.Full_Name, Result.First_Name);
+         if Length (Result.First_Name) > 0
+           and then Length (Result.Last_Name) > 0
+         then
+            Append (Result.Full_Name, " ");
+            Append (Result.Full_Name, Result.Last_Name);
+         end if;
+      end if;
+   end Extract_Profile;
+
+   ---------------------
+   --  Extract_Value  --
+   ---------------------
+
+   procedure Extract_Value
+     (Into    : in out Unbounded_String;
+      Request :        AWS.Status.Data;
+      Name    :        String)
+   is
+   begin
+      if Length (Into) = 0 then
+         Into := To_Unbounded_String (AWS.Status.Parameter (Request, Name));
+      end if;
+   end Extract_Value;
+
+   --------------------
+   --  Extract_XRDS  --
+   --------------------
+
+   procedure Extract_XRDS
+     (Realm   : in out Manager;
+      Content :        String;
+      Result  :    out End_Point)
+   is
+      pragma Unreferenced (Realm);
+
+      URI : constant String := Extract (Content, "<URI>", "</URI>");
+   begin
+      if URI'Length = 0 then
+         Log.Error ("Extract_XRDS: Content = """ & Content & """");
+
+         raise Invalid_End_Point
+           with "Cannot extract the <URI> from the XRDS document";
+      end if;
+
+      Result.URL := To_Unbounded_String (URI);
+   end Extract_XRDS;
+
+   -----------------------------
+   --  Get_Association_Query  --
+   -----------------------------
+
+   function Get_Association_Query
+     return String
+   is
+   begin
+      return "openid.ns=http://specs.openid.net/auth/2.0&"
+        & "openid.mode=associate&"
+        & "openid.session_type=no-encryption&"
+        & "openid.assoc_type=HMAC-SHA1";
+   end Get_Association_Query;
+
+   --------------------------
+   --  Get_Authentication  --
+   --------------------------
+
+   function Get_Authentication_URL
+     (Realm :    Manager;
+      OP    :    End_Point;
+      Assoc :    Association)
+      return String
+   is
+      Result : Unbounded_String := OP.URL;
+      Axa    : constant String := "ax";
+   begin
+      if Index (Result, "?") > 0 then
+         Append (Result, "&");
+      else
+         Append (Result, "?");
+      end if;
+
+      Append (Result, "openid.ns=http://specs.openid.net/auth/2.0");
+      Append (Result, "&openid.claimed_id=" &
+                "http://specs.openid.net/auth/2.0/identifier_select");
+      Append (Result, "&openid.identity=" &
+                "http://specs.openid.net/auth/2.0/identifier_select");
+      Append (Result, "&openid.mode=checkid_setup");
+      Append (Result, "&openid.ns." & Axa & "=http://openid.net/srv/ax/1.0");
+      Append (Result, "&openid." & Axa & ".mode=fetch_request");
+      Append (Result, "&openid." & Axa &
+                ".type.email=http://axschema.org/contact/email");
+      Append (Result, "&openid." & Axa &
+                ".type.fullname=http://axschema.org/namePerson");
+      Append (Result, "&openid." & Axa &
+                ".type.language=http://axschema.org/pref/language");
+      Append (Result, "&openid." & Axa &
+                ".type.firstname=http://axschema.org/namePerson/first");
+      Append (Result, "&openid." & Axa &
+                ".type.lastname=http://axschema.org/namePerson/last");
+      Append (Result, "&openid." & Axa &
+                ".type.gender=http://axschema.org/person/gender");
+      Append (Result, "&openid." & Axa &
+                ".required=email,fullname,language,firstname,"
+                & "lastname,gender");
+      Append (Result, "&openid.ns.sreg=http://openid.net/extensions/sreg/1.1");
+      Append (Result, "&openid.sreg.required=" &
+                "email,fullname,gender,country,nickname");
+      Append (Result, "&openid.return_to=");
+      Append (Result, Realm.Return_To);
+      Append (Result, "&openid.assoc_handle=");
+      Append (Result, Assoc.Assoc_Handle);
+      Append (Result, "&openid.realm=");
+      Append (Result, Realm.Realm);
+
+      return To_String (Result);
+   end Get_Authentication_URL;
+
+   --------------
+   --  Handle  --
+   --------------
+
+   function Handle
+     (Response :    AWS.Status.Data)
+      return Association_Handle
+   is
+   begin
+      return To_Unbounded_String
+        (AWS.Status.Parameter (Response, "openid.assoc_handle"));
+   end Handle;
+
+   --------------
+   --  Handle  --
+   --------------
+
+   function Handle
+     (Item :    Association)
+      return Association_Handle
+   is
+   begin
+      return Item.Assoc_Handle;
+   end Handle;
+
+   ----------------
+   --  Identity  --
+   ----------------
+
+   function Identity
+     (Auth :    Authentication)
+      return String
+   is
+   begin
+      return To_String (Auth.Identity);
+   end Identity;
+
+   ------------------
+   --  Initialize  --
+   ------------------
+
+   procedure Initialize
+     (Realm     : in out Manager;
+      Domain    :        String;
+      Return_To :        String)
+   is
+   begin
+      Realm.Realm := To_Unbounded_String (Domain);
+      Realm.Return_To := To_Unbounded_String (Domain & Return_To);
+   end Initialize;
+
+   ------------------
+   --  Is_Expired  --
+   ------------------
+
+   function Is_Expired
+     (Item :    Association)
+      return Boolean
+   is
+      use Ada.Calendar;
+   begin
+      return Item.Expired < Clock;
+   end Is_Expired;
+
+   ------------------------
+   --  Log_Verification  --
+   ------------------------
+
+   procedure Log_Verification
+     (Succeeded :    Boolean;
+      Message   :    String)
+   is
+   begin
+      if Succeeded then
+         Log.Info  ("OpenID verification: " & Message);
+      else
+         Log.Error ("OpenID verification failed: " & Message);
+      end if;
+   end Log_Verification;
+
+   --------------
+   --  Status  --
+   --------------
+
+   function Status
+     (Auth :    Authentication)
+      return Auth_Result
+   is
+   begin
+      return Auth.Status;
+   end Status;
+
+   -----------------
+   --  To_String  --
+   -----------------
+
+   function To_String
+     (Assoc : Association)
+      return String
+   is
+   begin
+      return "session_type=" & To_String (Assoc.Session_Type)
+        & "&assoc_type=" & To_String (Assoc.Assoc_Type)
+        & "&assoc_handle=" & To_String (Assoc.Assoc_Handle)
+        & "&mac_key=" & To_String (Assoc.Mac_Key);
+   end To_String;
+
+   --------------
+   --  Verify  --
+   --------------
+
+   function Verify
+     (Realm   :    Manager;
+      Assoc   :    Association;
+      Request :    AWS.Status.Data)
+      return Authentication
+   is
+      Mode : constant String := AWS.Status.Parameter (Request, "openid.mode");
+   begin
+      --  Step 1: verify the response status
+      if Mode = "cancel" then
+         Log_Verification (Succeeded => False,
+                           Message   => "Authentication refused");
+         return (Status => Cancel);
+      end if;
+
+      if Mode = "setup_needed" then
+         Log_Verification (Succeeded => False,
+                           Message   => "Setup is needed");
+         return (Status => Setup_Needed);
+      end if;
+
+      if Mode /= "id_res" then
+         Log_Verification (Succeeded => False,
+                           Message   => "Setup is needed");
+         return (Status => Unknown);
+      end if;
+
+      --  OpenID Section: 11.1.  Verifying the Return URL
+      declare
+         Value : constant String :=
+                   AWS.Status.Parameter (Request, "openid.return_to");
+      begin
+         if Value /= Realm.Return_To then
+            Log_Verification
+              (Succeeded => False,
+               Message   => "openid.return_to URL does not match");
+            return (Status => Unknown);
+         end if;
+      end;
+
+      return Result : Authentication do
+         --  OpenID Section: 11.3.  Checking the Nonce
+         declare
+            Value : constant String :=
+                      AWS.Status.Parameter (Request, "openid.response_nonce");
+         begin
+            if Value = "" then
+               Log_Verification
+                 (Succeeded => False,
+                  Message   => "openid.response_nonce is empty");
+
+               Result := (Status => Unknown);
+               return;
+            end if;
+         end;
+
+         --  OpenID Section: 11.4.  Verifying Signatures
+         Manager'Class (Realm).Verify_Signature (Assoc, Request, Result);
+
+         declare
+            Value : constant String :=
+                      AWS.Status.Parameter (Request, "openid.ns.sreg");
+         begin
+            --  Extract profile information
+            if Value = "http://openid.net/extensions/sreg/1.1" then
+               Extract_Profile ("openid.sreg", Request, Result);
+            end if;
+         end;
+
+         declare
+            Value : constant String :=
+                      AWS.Status.Parameter (Request, "openid.ns.ax");
+         begin
+            if Value = "http://openid.net/srv/ax/1.0" then
+               Extract_Profile ("openid.ax.value", Request, Result);
+            end if;
+         end;
+
+         declare
+            Value : constant String :=
+                      AWS.Status.Parameter (Request, "openid.ns.ext1");
+         begin
+            if Value = "http://openid.net/srv/ax/1.0" then
+               Extract_Profile ("openid.ext1.value", Request, Result);
+            end if;
+         end;
+
+         if Result.Status = Authenticated then
+            Manager'Class (Realm).Verify_Discovered (Assoc, Request, Result);
+         end if;
+      end return;
+   end Verify;
+
+   -------------------------
+   --  Verify_Discovered  --
+   -------------------------
+
+   procedure Verify_Discovered
+     (Realm   :        Manager;
+      Assoc   :        Association;
+      Request :        AWS.Status.Data;
+      Result  :    out Authentication)
+   is
+      pragma Unreferenced (Realm, Assoc);
+   begin
+      Result.Claimed_ID := To_Unbounded_String
+        (AWS.Status.Parameter (Request, "openid.claimed_id"));
+
+      Result.Identity   := To_Unbounded_String
+        (AWS.Status.Parameter (Request, "openid.identity"));
+   end Verify_Discovered;
+
+   ------------------------
+   --  Verify_Signature  --
+   ------------------------
+
+   procedure Verify_Signature
+     (Realm   :        Manager;
+      Assoc   :        Association;
+      Request :        AWS.Status.Data;
+      Result  : in out Authentication)
+   is
+      pragma Unreferenced (Realm);
+
+      use Ada.Strings.Fixed;
+      use type AWS.OpenID.Encoders.SHA1.Digest;
+
+      Last   : Natural;
+      Param  : Unbounded_String;
+      Pos    : Natural := 1;
+      Sign   : Unbounded_String;
+      Signed : constant String := AWS.Status.Parameter (Request,
+                                                        "openid.signed");
+      Len    : constant Natural := Signed'Length;
+   begin
+      while Pos < Len loop
+         Last := Index (Signed, ",", Pos);
+
+         if Last > 0 then
+            Param := To_Unbounded_String (Signed (Pos .. Last - 1));
+            Pos  := Last + 1;
+         else
+            Param := To_Unbounded_String (Signed (Pos .. Len));
+            Pos  := Len + 1;
+         end if;
+
+         declare
+            Name  : constant String := "openid." & To_String (Param);
+            Value : constant String := AWS.Status.Parameter (Request, Name);
+         begin
+            Append (Sign, Param);
+            Append (Sign, ':');
+            Append (Sign, Value);
+            Append (Sign, ASCII.LF);
+         end;
+      end loop;
+
+      Log.Info ("Signing: '" & To_String (Sign) & "'");
+
+      declare
+         Decoder : constant Encoders.Encoder :=
+                     Encoders.Create (Encoders.Base64_Encoding);
+         S       : constant String :=
+                     AWS.Status.Parameter (Request, "openid.sig");
+         Key     : constant String :=
+                     Decoder.Decode (To_String (Assoc.Mac_Key));
+         R       : constant Encoders.SHA1.Base64_Digest :=
+                     Encoders.HMAC.SHA1.Sign_Base64 (Key, To_String (Sign));
+      begin
+         Log.Info ("Signature: " & S & " - " & R);
+
+         if R = S then
+            Log_Verification
+              (Succeeded => True,
+               Message   => "Signatures match.  Authenticated.");
+
+            Result := (Status => Authenticated, others => <>);
+         else
+            Log_Verification (Succeeded => False,
+                              Message   => "Invalid signature.");
+
+            Result := (Status => Invalid_Signature);
+         end if;
+      end;
+   end Verify_Signature;
+
+end AWS.OpenID.Security;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-security.ads Ada-development-Makefile/aws/src/openid/aws-openid-security.ads
--- aws.upstream/src/openid/aws-openid-security.ads	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-security.ads	2013-10-28 11:44:52.000000000 +0000
@@ -0,0 +1,216 @@
+-------------------------------------------------------------------------------
+--  The contents of this file originates from the Stephane Carrez project
+--  Ada Server Faces (security-openid).
+--
+--  The contents has been altered by AdaHeads K/S. The changes are primarily
+--  stylistic plus removal of code that isn't directly used to complete an
+--  OpenID authentication process. Changes to the actual code (logic) are not
+--  marked specifically. AdaHeads K/S does NOT claim copyright on this file.
+--
+--  The header from the original file is included here for copyright and
+--  license information:
+--
+--  -----------------------------------------------------------------------
+--  --  security-openid -- Open ID 2.0 Support
+--  --  Copyright (C) 2009, 2010, 2011 Stephane Carrez
+--  --  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
+--  --
+--  --  Licensed under the Apache License, Version 2.0 (the "License");
+--  --  you may not use this file except in compliance with the License.
+--  --  You may obtain a copy of the License at
+--  --
+--  --      http://www.apache.org/licenses/LICENSE-2.0
+--  --
+--  --  Unless required by applicable law or agreed to in writing, software
+--  --  distributed under the License is distributed on an "AS IS" BASIS,
+--  --  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+--  --  See the License for the specific language governing permissions and
+--  --  limitations under the License.
+--  -----------------------------------------------------------------------
+
+with Ada.Calendar;
+with Ada.Finalization;
+with Ada.Strings.Unbounded;
+
+with AWS.Status;
+
+private
+package AWS.OpenID.Security is
+
+   Invalid_End_Point : exception;
+   Service_Error     : exception;
+
+   type Auth_Result is (Authenticated,
+                        Cancel,
+                        Setup_Needed,
+                        Association_Not_Found,
+                        Unknown,
+                        Invalid_Signature);
+
+   type End_Point is private;
+   --  An End_Point represents the OpenID provider that will authenticate the
+   --  user.
+
+   type Association is private;
+   subtype Association_Handle is Ada.Strings.Unbounded.Unbounded_String;
+   --  The OpenID association contains the shared secret between the relying
+   --  party and the OpenID provider. The association can be cached and reused
+   --  to authenticate different users using the same OpenID provider. The
+   --  association also has an expiration date.
+
+   function Handle
+     (Item :    Association)
+      return Association_Handle;
+
+   function Handle
+     (Response :    AWS.Status.Data)
+      return Association_Handle;
+
+   function Is_Expired
+     (Item :    Association)
+      return Boolean;
+   --  Return True if Item is Expired.
+
+   function To_String
+     (Assoc : Association)
+      return String;
+   --  Dump the association as a string (for debugging purposes)
+
+   type Authentication is private;
+
+   function Authenticated
+     (Auth :    Authentication)
+      return Boolean;
+
+   function Status
+     (Auth :    Authentication)
+      return Auth_Result;
+
+   function Identity
+     (Auth :    Authentication)
+      return String;
+
+   type Manager is tagged limited private;
+
+   procedure Initialize
+     (Realm     : in out Manager;
+      Domain    :        String;
+      Return_To :        String);
+   --  Initialize is called to configure the OpenID realm and set the OpenID
+   --  return callback.
+   --  Discover is called to retrieve from the OpenID provider the XRDS stream
+   --  and identify the provider. An End_Point is returned.
+   --  Associate is called to make the association with the End_Point. The
+   --  Association record holds the session and authentication.
+   --  Get_Authentication_URL builds the provider OpenID authentication URL for
+   --  the association.
+   --  The user should be redirected to the authentication URL.
+   --  The OpenID provider authenticate the user and redirects the user to the
+   --  callback.
+   --  The association is decoded from the callback parameter.
+   --  Verify is called with the association to check the result and obtain the
+   --  authentication results.
+
+   procedure Discover
+     (Realm  : in out Manager;
+      Name   :        String;
+      Result :    out End_Point);
+   --  Discover the OpenID provider that is used to authenticate the user.
+   --  Name can be an URL or an alias that identifies the provider. A cached
+   --  OpenID provider can be returned. (See OpenID Section 7.3 Discovery)
+
+   procedure Associate
+     (Realm  : in out Manager;
+      OP     :        End_Point;
+      Result :    out Association);
+   --  Associate the application (relying party) with the OpenID provider.
+   --  The association can be cached.
+   --  (See OpenID Section 8 Establishing Associations)
+
+   function Get_Authentication_URL
+     (Realm :    Manager;
+      OP    :    End_Point;
+      Assoc :    Association)
+      return String;
+
+   function Verify
+     (Realm   :    Manager;
+      Assoc   :    Association;
+      Request :    AWS.Status.Data)
+      return Authentication;
+
+   procedure Verify_Discovered
+     (Realm   :        Manager;
+      Assoc   :        Association;
+      Request :        AWS.Status.Data;
+      Result  :    out Authentication);
+
+   procedure Verify_Signature
+     (Realm   :        Manager;
+      Assoc   :        Association;
+      Request :        AWS.Status.Data;
+      Result  : in out Authentication);
+
+   procedure Discover_XRDS
+     (Realm  : in out Manager;
+      URI    :        String;
+      Result :    out End_Point);
+   --  Read the XRDS document from the URI and initialize the OpenID provider
+   --  end point.
+
+   procedure Extract_XRDS
+     (Realm   : in out Manager;
+      Content :        String;
+      Result  :    out End_Point);
+   --  Extract the OpenID provider URI from the XRDS content.
+   --  The default implementation is very basic as it returns the first <URI>
+   --  available in the stream without validating the XRDS document.
+   --  Raises the Invalid_End_Point exception if the URI cannot be found.
+
+private
+
+   use Ada.Strings.Unbounded;
+
+   type Association is
+      record
+         Session_Type : Unbounded_String;
+         Assoc_Type   : Unbounded_String;
+         Assoc_Handle : Association_Handle;
+         Mac_Key      : Unbounded_String;
+         Expired      : Ada.Calendar.Time;
+      end record;
+
+   type Authentication (Status : Auth_Result := Unknown) is
+      record
+         case Status is
+            when Authenticated =>
+               Identity   : Unbounded_String;
+               Claimed_ID : Unbounded_String;
+               Email      : Unbounded_String;
+               Full_Name  : Unbounded_String;
+               First_Name : Unbounded_String;
+               Last_Name  : Unbounded_String;
+               Language   : Unbounded_String;
+               Country    : Unbounded_String;
+               Gender     : Unbounded_String;
+               Timezone   : Unbounded_String;
+               Nickname   : Unbounded_String;
+            when others =>
+               null;
+         end case;
+      end record;
+
+   type End_Point is
+      record
+         URL     : Unbounded_String;
+         Alias   : Unbounded_String;
+         Expired : Ada.Calendar.Time;
+      end record;
+
+   type Manager is new Ada.Finalization.Limited_Controlled with
+      record
+         Realm     : Unbounded_String;
+         Return_To : Unbounded_String;
+      end record;
+
+end AWS.OpenID.Security;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-state.adb Ada-development-Makefile/aws/src/openid/aws-openid-state.adb
--- aws.upstream/src/openid/aws-openid-state.adb	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-state.adb	2013-06-26 11:38:18.000000000 +0000
@@ -0,0 +1,65 @@
+-------------------------------------------------------------------------------
+--                                                                           --
+--                      Copyright (C) 2012-, AdaHeads K/S                    --
+--                                                                           --
+--  This is free software;  you can redistribute it and/or modify it         --
+--  under terms of the  GNU General Public License  as published by the      --
+--  Free Software  Foundation;  either version 3,  or (at your  option) any  --
+--  later version. This library is distributed in the hope that it will be   --
+--  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  --
+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     --
+--  You should have received a copy of the GNU General Public License and    --
+--  a copy of the GCC Runtime Library Exception along with this program;     --
+--  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+--  <http://www.gnu.org/licenses/>.                                          --
+--                                                                           --
+-------------------------------------------------------------------------------
+
+with AWS.OpenID.Association_Database;
+with AWS.OpenID.Authentication_Database;
+
+package body AWS.OpenID.State is
+
+   ------------
+   --  Load  --
+   ------------
+
+   procedure Load
+     (File_Name           :    String;
+      Suppress_Exceptions :    Boolean := False)
+   is
+   begin
+      Load_Association_Data :
+      begin
+         Association_Database.Load (File_Name & ".associations");
+      exception
+         when others =>
+            if not Suppress_Exceptions then
+               raise;
+            end if;
+      end Load_Association_Data;
+
+      Load_Authentication_Data :
+      begin
+         Authentication_Database.Load (File_Name & ".authentications");
+      exception
+         when others =>
+            if not Suppress_Exceptions then
+               raise;
+            end if;
+      end Load_Authentication_Data;
+   end Load;
+
+   ------------
+   --  Save  --
+   ------------
+
+   procedure Save
+     (File_Name :    String)
+   is
+   begin
+      Association_Database.Save (File_Name & ".associations");
+      Authentication_Database.Save (File_Name & ".authentications");
+   end Save;
+
+end AWS.OpenID.State;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/aws-openid-state.ads Ada-development-Makefile/aws/src/openid/aws-openid-state.ads
--- aws.upstream/src/openid/aws-openid-state.ads	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/aws-openid-state.ads	2013-06-26 11:38:18.000000000 +0000
@@ -0,0 +1,33 @@
+-------------------------------------------------------------------------------
+--                                                                           --
+--                      Copyright (C) 2012-, AdaHeads K/S                    --
+--                                                                           --
+--  This is free software;  you can redistribute it and/or modify it         --
+--  under terms of the  GNU General Public License  as published by the      --
+--  Free Software  Foundation;  either version 3,  or (at your  option) any  --
+--  later version. This library is distributed in the hope that it will be   --
+--  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  --
+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     --
+--  You should have received a copy of the GNU General Public License and    --
+--  a copy of the GCC Runtime Library Exception along with this program;     --
+--  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+--  <http://www.gnu.org/licenses/>.                                          --
+--                                                                           --
+-------------------------------------------------------------------------------
+
+package AWS.OpenID.State is
+
+   procedure Load
+     (File_Name           :    String;
+      Suppress_Exceptions :    Boolean := False);
+   --  Load the File_Name.[associations | authentications] files.
+
+   procedure Save
+     (File_Name :    String);
+   --  Remember to call Save before stopping the last HTTP server.
+   --  If you compile the AWS.OpenID packages with
+   --     AUTHENTICATION_DATABASE_IMPLEMENTATION=session_cookies
+   --  Save depends on AWS.Session, which drops all state after the last HTTP
+   --  server in the application is stopped.
+
+end AWS.OpenID.State;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/openid/openid.gpr Ada-development-Makefile/aws/src/openid/openid.gpr
--- aws.upstream/src/openid/openid.gpr	1970-01-01 00:00:00.000000000 +0000
+++ Ada-development-Makefile/aws/src/openid/openid.gpr	2013-06-20 12:44:08.000000000 +0000
@@ -0,0 +1,39 @@
+-------------------------------------------------------------------------------
+--                                                                           --
+--                        OpenID_Client Project File                         --
+--                                                                           --
+--                      Copyright (C) 2012-, AdaHeads K/S                    --
+--                                                                           --
+--  This is free software;  you can redistribute it and/or modify it         --
+--  under terms of the  GNU General Public License  as published by the      --
+--  Free Software  Foundation;  either version 3,  or (at your  option) any  --
+--  later version. This library is distributed in the hope that it will be   --
+--  useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  --
+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     --
+--  You should have received a copy of the GNU General Public License and    --
+--  a copy of the GCC Runtime Library Exception along with this program;     --
+--  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
+--  <http://www.gnu.org/licenses/>.                                          --
+--                                                                           --
+-------------------------------------------------------------------------------
+
+with "../shared";
+
+abstract project OpenID is
+
+   type Authentication_Database_Type is ("session_cookies", "hashed_map");
+   Authentication_Database : Authentication_Database_Type :=
+     External ("AUTHENTICATION_DATABASE_IMPLEMENTATION", "session_cookies");
+
+   Source_Options := ();
+
+   case Shared.OpenID is
+      when "enabled" =>
+         Source_Options :=
+           ("openid/",
+            "openid/authentication_database-" & Authentication_Database);
+      when "disabled" =>
+         null;
+   end case;
+
+end OpenID;
diff --new-file '--exclude=templates_parser' '--exclude=.git' --recursive --unified aws.upstream/src/src.gpr Ada-development-Makefile/aws/src/src.gpr
--- aws.upstream/src/src.gpr	2013-10-28 13:01:44.000000000 +0000
+++ Ada-development-Makefile/aws/src/src.gpr	2013-10-28 11:58:48.000000000 +0000
@@ -22,13 +22,16 @@
 with "../include/include";
 with "../ssl/ssl";
 
+with "openid/openid";
+
 library project Src is
 
    for Languages use ("Ada", "Project file", "makefile");
 
    for Source_Dirs use
      ("core", "extended", "../templates_parser/src", "../config/src",
-      "../config/ssl", "../" & Shared.Target_Dir & "/setup/src", ".");
+      "../config/ssl", "../" & Shared.Target_Dir & "/setup/src", ".") &
+     OpenID.Source_Options;
 
    --  XMLAda Installed, add xsrc and soap directories
 
